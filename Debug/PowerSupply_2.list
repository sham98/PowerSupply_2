
PowerSupply_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f4c  08002f4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f4c  08002f4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f4c  08002f4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08002f60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002f60  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c147  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb6  00000000  00000000  0002c17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0002dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  0002ea38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000101ed  00000000  00000000  0002f650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0f5  00000000  00000000  0003f83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062fc8  00000000  00000000  0004e932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b18fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f38  00000000  00000000  000b194c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f04 	.word	0x08002f04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002f04 	.word	0x08002f04

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fe14 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f80f 	bl	800024a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fb24 	bl	8000878 <MX_GPIO_Init>
  MX_ADC_Init();
 8000230:	f000 f868 	bl	8000304 <MX_ADC_Init>
  MX_TIM1_Init();
 8000234:	f000 f91c 	bl	8000470 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000238:	f000 f982 	bl	8000540 <MX_TIM3_Init>
  MX_TIM16_Init();
 800023c:	f000 fa10 	bl	8000660 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000240:	f000 fa94 	bl	800076c <MX_TIM17_Init>
  MX_I2C1_Init();
 8000244:	f000 f8d4 	bl	80003f0 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000248:	e7fe      	b.n	8000248 <main+0x28>

0800024a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024a:	b590      	push	{r4, r7, lr}
 800024c:	b095      	sub	sp, #84	; 0x54
 800024e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000250:	2420      	movs	r4, #32
 8000252:	193b      	adds	r3, r7, r4
 8000254:	0018      	movs	r0, r3
 8000256:	2330      	movs	r3, #48	; 0x30
 8000258:	001a      	movs	r2, r3
 800025a:	2100      	movs	r1, #0
 800025c:	f002 fe4a 	bl	8002ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	2310      	movs	r3, #16
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	0018      	movs	r0, r3
 8000266:	2310      	movs	r3, #16
 8000268:	001a      	movs	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	f002 fe42 	bl	8002ef4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	003b      	movs	r3, r7
 8000272:	0018      	movs	r0, r3
 8000274:	2310      	movs	r3, #16
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f002 fe3b 	bl	8002ef4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800027e:	0021      	movs	r1, r4
 8000280:	187b      	adds	r3, r7, r1
 8000282:	2212      	movs	r2, #18
 8000284:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2201      	movs	r2, #1
 800028a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2201      	movs	r2, #1
 8000290:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2210      	movs	r2, #16
 8000296:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2210      	movs	r2, #16
 800029c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2200      	movs	r2, #0
 80002a2:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 fbdc 	bl	8001a64 <HAL_RCC_OscConfig>
 80002ac:	1e03      	subs	r3, r0, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002b0:	f000 fb60 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	2110      	movs	r1, #16
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2207      	movs	r2, #7
 80002ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2100      	movs	r1, #0
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 fee0 	bl	8002098 <HAL_RCC_ClockConfig>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002dc:	f000 fb4a 	bl	8000974 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002e0:	003b      	movs	r3, r7
 80002e2:	2220      	movs	r2, #32
 80002e4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002e6:	003b      	movs	r3, r7
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ec:	003b      	movs	r3, r7
 80002ee:	0018      	movs	r0, r3
 80002f0:	f002 f804 	bl	80022fc <HAL_RCCEx_PeriphCLKConfig>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002f8:	f000 fb3c 	bl	8000974 <Error_Handler>
  }
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b015      	add	sp, #84	; 0x54
 8000302:	bd90      	pop	{r4, r7, pc}

08000304 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	0018      	movs	r0, r3
 800030e:	230c      	movs	r3, #12
 8000310:	001a      	movs	r2, r3
 8000312:	2100      	movs	r1, #0
 8000314:	f002 fdee 	bl	8002ef4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000318:	4b33      	ldr	r3, [pc, #204]	; (80003e8 <MX_ADC_Init+0xe4>)
 800031a:	4a34      	ldr	r2, [pc, #208]	; (80003ec <MX_ADC_Init+0xe8>)
 800031c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800031e:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <MX_ADC_Init+0xe4>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000324:	4b30      	ldr	r3, [pc, #192]	; (80003e8 <MX_ADC_Init+0xe4>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800032a:	4b2f      	ldr	r3, [pc, #188]	; (80003e8 <MX_ADC_Init+0xe4>)
 800032c:	2200      	movs	r2, #0
 800032e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000330:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <MX_ADC_Init+0xe4>)
 8000332:	2201      	movs	r2, #1
 8000334:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000336:	4b2c      	ldr	r3, [pc, #176]	; (80003e8 <MX_ADC_Init+0xe4>)
 8000338:	2204      	movs	r2, #4
 800033a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800033c:	4b2a      	ldr	r3, [pc, #168]	; (80003e8 <MX_ADC_Init+0xe4>)
 800033e:	2200      	movs	r2, #0
 8000340:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000342:	4b29      	ldr	r3, [pc, #164]	; (80003e8 <MX_ADC_Init+0xe4>)
 8000344:	2200      	movs	r2, #0
 8000346:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000348:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <MX_ADC_Init+0xe4>)
 800034a:	2200      	movs	r2, #0
 800034c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800034e:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <MX_ADC_Init+0xe4>)
 8000350:	2200      	movs	r2, #0
 8000352:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <MX_ADC_Init+0xe4>)
 8000356:	22c2      	movs	r2, #194	; 0xc2
 8000358:	32ff      	adds	r2, #255	; 0xff
 800035a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800035c:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <MX_ADC_Init+0xe4>)
 800035e:	2200      	movs	r2, #0
 8000360:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000362:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <MX_ADC_Init+0xe4>)
 8000364:	2224      	movs	r2, #36	; 0x24
 8000366:	2100      	movs	r1, #0
 8000368:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800036a:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <MX_ADC_Init+0xe4>)
 800036c:	2201      	movs	r2, #1
 800036e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000370:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <MX_ADC_Init+0xe4>)
 8000372:	0018      	movs	r0, r3
 8000374:	f000 fdd0 	bl	8000f18 <HAL_ADC_Init>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800037c:	f000 fafa 	bl	8000974 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	0152      	lsls	r2, r2, #5
 800038c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2280      	movs	r2, #128	; 0x80
 8000392:	0552      	lsls	r2, r2, #21
 8000394:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000396:	1d3a      	adds	r2, r7, #4
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <MX_ADC_Init+0xe4>)
 800039a:	0011      	movs	r1, r2
 800039c:	0018      	movs	r0, r3
 800039e:	f000 fefb 	bl	8001198 <HAL_ADC_ConfigChannel>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003a6:	f000 fae5 	bl	8000974 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2201      	movs	r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003b0:	1d3a      	adds	r2, r7, #4
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <MX_ADC_Init+0xe4>)
 80003b4:	0011      	movs	r1, r2
 80003b6:	0018      	movs	r0, r3
 80003b8:	f000 feee 	bl	8001198 <HAL_ADC_ConfigChannel>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80003c0:	f000 fad8 	bl	8000974 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2202      	movs	r2, #2
 80003c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ca:	1d3a      	adds	r2, r7, #4
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_ADC_Init+0xe4>)
 80003ce:	0011      	movs	r1, r2
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fee1 	bl	8001198 <HAL_ADC_ConfigChannel>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80003da:	f000 facb 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b004      	add	sp, #16
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	20000028 	.word	0x20000028
 80003ec:	40012400 	.word	0x40012400

080003f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_I2C1_Init+0x74>)
 80003f6:	4a1c      	ldr	r2, [pc, #112]	; (8000468 <MX_I2C1_Init+0x78>)
 80003f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <MX_I2C1_Init+0x74>)
 80003fc:	4a1b      	ldr	r2, [pc, #108]	; (800046c <MX_I2C1_Init+0x7c>)
 80003fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <MX_I2C1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000406:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MX_I2C1_Init+0x74>)
 8000408:	2201      	movs	r2, #1
 800040a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_I2C1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <MX_I2C1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_I2C1_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_I2C1_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_I2C1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_I2C1_Init+0x74>)
 800042c:	0018      	movs	r0, r3
 800042e:	f001 f9eb 	bl	8001808 <HAL_I2C_Init>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000436:	f000 fa9d 	bl	8000974 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <MX_I2C1_Init+0x74>)
 800043c:	2100      	movs	r1, #0
 800043e:	0018      	movs	r0, r3
 8000440:	f001 fa78 	bl	8001934 <HAL_I2CEx_ConfigAnalogFilter>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d001      	beq.n	800044c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000448:	f000 fa94 	bl	8000974 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <MX_I2C1_Init+0x74>)
 800044e:	2100      	movs	r1, #0
 8000450:	0018      	movs	r0, r3
 8000452:	f001 fabb 	bl	80019cc <HAL_I2CEx_ConfigDigitalFilter>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800045a:	f000 fa8b 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000068 	.word	0x20000068
 8000468:	40005400 	.word	0x40005400
 800046c:	2000090e 	.word	0x2000090e

08000470 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b08d      	sub	sp, #52	; 0x34
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000476:	240c      	movs	r4, #12
 8000478:	193b      	adds	r3, r7, r4
 800047a:	0018      	movs	r0, r3
 800047c:	2324      	movs	r3, #36	; 0x24
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f002 fd37 	bl	8002ef4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	0018      	movs	r0, r3
 800048a:	2308      	movs	r3, #8
 800048c:	001a      	movs	r2, r3
 800048e:	2100      	movs	r1, #0
 8000490:	f002 fd30 	bl	8002ef4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000494:	4b27      	ldr	r3, [pc, #156]	; (8000534 <MX_TIM1_Init+0xc4>)
 8000496:	4a28      	ldr	r2, [pc, #160]	; (8000538 <MX_TIM1_Init+0xc8>)
 8000498:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800049a:	4b26      	ldr	r3, [pc, #152]	; (8000534 <MX_TIM1_Init+0xc4>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a0:	4b24      	ldr	r3, [pc, #144]	; (8000534 <MX_TIM1_Init+0xc4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004a6:	4b23      	ldr	r3, [pc, #140]	; (8000534 <MX_TIM1_Init+0xc4>)
 80004a8:	4a24      	ldr	r2, [pc, #144]	; (800053c <MX_TIM1_Init+0xcc>)
 80004aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ac:	4b21      	ldr	r3, [pc, #132]	; (8000534 <MX_TIM1_Init+0xc4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004b2:	4b20      	ldr	r3, [pc, #128]	; (8000534 <MX_TIM1_Init+0xc4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b8:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <MX_TIM1_Init+0xc4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004be:	0021      	movs	r1, r4
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2201      	movs	r2, #1
 80004c4:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2201      	movs	r2, #1
 80004d0:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2201      	movs	r2, #1
 80004e8:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2200      	movs	r2, #0
 80004f4:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80004f6:	187a      	adds	r2, r7, r1
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <MX_TIM1_Init+0xc4>)
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 f86b 	bl	80025d8 <HAL_TIM_Encoder_Init>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000506:	f000 fa35 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000516:	1d3a      	adds	r2, r7, #4
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_TIM1_Init+0xc4>)
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f002 fc15 	bl	8002d4c <HAL_TIMEx_MasterConfigSynchronization>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d001      	beq.n	800052a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000526:	f000 fa25 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b00d      	add	sp, #52	; 0x34
 8000530:	bd90      	pop	{r4, r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	200000b4 	.word	0x200000b4
 8000538:	40012c00 	.word	0x40012c00
 800053c:	0000ffff 	.word	0x0000ffff

08000540 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b092      	sub	sp, #72	; 0x48
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000546:	2324      	movs	r3, #36	; 0x24
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	0018      	movs	r0, r3
 800054c:	2324      	movs	r3, #36	; 0x24
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f002 fccf 	bl	8002ef4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000556:	231c      	movs	r3, #28
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	0018      	movs	r0, r3
 800055c:	2308      	movs	r3, #8
 800055e:	001a      	movs	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f002 fcc7 	bl	8002ef4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000566:	003b      	movs	r3, r7
 8000568:	0018      	movs	r0, r3
 800056a:	231c      	movs	r3, #28
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f002 fcc0 	bl	8002ef4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000574:	4b37      	ldr	r3, [pc, #220]	; (8000654 <MX_TIM3_Init+0x114>)
 8000576:	4a38      	ldr	r2, [pc, #224]	; (8000658 <MX_TIM3_Init+0x118>)
 8000578:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800057a:	4b36      	ldr	r3, [pc, #216]	; (8000654 <MX_TIM3_Init+0x114>)
 800057c:	2200      	movs	r2, #0
 800057e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000580:	4b34      	ldr	r3, [pc, #208]	; (8000654 <MX_TIM3_Init+0x114>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000586:	4b33      	ldr	r3, [pc, #204]	; (8000654 <MX_TIM3_Init+0x114>)
 8000588:	4a34      	ldr	r2, [pc, #208]	; (800065c <MX_TIM3_Init+0x11c>)
 800058a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058c:	4b31      	ldr	r3, [pc, #196]	; (8000654 <MX_TIM3_Init+0x114>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000592:	4b30      	ldr	r3, [pc, #192]	; (8000654 <MX_TIM3_Init+0x114>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000598:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <MX_TIM3_Init+0x114>)
 800059a:	0018      	movs	r0, r3
 800059c:	f001 ffcc 	bl	8002538 <HAL_TIM_PWM_Init>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005a4:	f000 f9e6 	bl	8000974 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005a8:	2124      	movs	r1, #36	; 0x24
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2201      	movs	r2, #1
 80005d2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80005e0:	187a      	adds	r2, r7, r1
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_TIM3_Init+0x114>)
 80005e4:	0011      	movs	r1, r2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 fff6 	bl	80025d8 <HAL_TIM_Encoder_Init>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80005f0:	f000 f9c0 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f4:	211c      	movs	r1, #28
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000602:	187a      	adds	r2, r7, r1
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_TIM3_Init+0x114>)
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f002 fb9f 	bl	8002d4c <HAL_TIMEx_MasterConfigSynchronization>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000612:	f000 f9af 	bl	8000974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000616:	003b      	movs	r3, r7
 8000618:	2260      	movs	r2, #96	; 0x60
 800061a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800061c:	003b      	movs	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000622:	003b      	movs	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000628:	003b      	movs	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800062e:	0039      	movs	r1, r7
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_TIM3_Init+0x114>)
 8000632:	2208      	movs	r2, #8
 8000634:	0018      	movs	r0, r3
 8000636:	f002 f877 	bl	8002728 <HAL_TIM_PWM_ConfigChannel>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800063e:	f000 f999 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <MX_TIM3_Init+0x114>)
 8000644:	0018      	movs	r0, r3
 8000646:	f000 fb23 	bl	8000c90 <HAL_TIM_MspPostInit>

}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b012      	add	sp, #72	; 0x48
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	200000fc 	.word	0x200000fc
 8000658:	40000400 	.word	0x40000400
 800065c:	0000ffff 	.word	0x0000ffff

08000660 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b090      	sub	sp, #64	; 0x40
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000666:	2324      	movs	r3, #36	; 0x24
 8000668:	18fb      	adds	r3, r7, r3
 800066a:	0018      	movs	r0, r3
 800066c:	231c      	movs	r3, #28
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f002 fc3f 	bl	8002ef4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	0018      	movs	r0, r3
 800067a:	2320      	movs	r3, #32
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f002 fc38 	bl	8002ef4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <MX_TIM16_Init+0x100>)
 8000686:	4a37      	ldr	r2, [pc, #220]	; (8000764 <MX_TIM16_Init+0x104>)
 8000688:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800068a:	4b35      	ldr	r3, [pc, #212]	; (8000760 <MX_TIM16_Init+0x100>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000690:	4b33      	ldr	r3, [pc, #204]	; (8000760 <MX_TIM16_Init+0x100>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000696:	4b32      	ldr	r3, [pc, #200]	; (8000760 <MX_TIM16_Init+0x100>)
 8000698:	4a33      	ldr	r2, [pc, #204]	; (8000768 <MX_TIM16_Init+0x108>)
 800069a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069c:	4b30      	ldr	r3, [pc, #192]	; (8000760 <MX_TIM16_Init+0x100>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006a2:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <MX_TIM16_Init+0x100>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a8:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_TIM16_Init+0x100>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <MX_TIM16_Init+0x100>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 fef1 	bl	8002498 <HAL_TIM_Base_Init>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80006ba:	f000 f95b 	bl	8000974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80006be:	4b28      	ldr	r3, [pc, #160]	; (8000760 <MX_TIM16_Init+0x100>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 ff39 	bl	8002538 <HAL_TIM_PWM_Init>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 f953 	bl	8000974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ce:	2124      	movs	r1, #36	; 0x24
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2260      	movs	r2, #96	; 0x60
 80006d4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006fa:	1879      	adds	r1, r7, r1
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_TIM16_Init+0x100>)
 80006fe:	2200      	movs	r2, #0
 8000700:	0018      	movs	r0, r3
 8000702:	f002 f811 	bl	8002728 <HAL_TIM_PWM_ConfigChannel>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800070a:	f000 f933 	bl	8000974 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	0192      	lsls	r2, r2, #6
 8000732:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800073a:	1d3a      	adds	r2, r7, #4
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_TIM16_Init+0x100>)
 800073e:	0011      	movs	r1, r2
 8000740:	0018      	movs	r0, r3
 8000742:	f002 fb55 	bl	8002df0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 800074a:	f000 f913 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <MX_TIM16_Init+0x100>)
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fa9d 	bl	8000c90 <HAL_TIM_MspPostInit>

}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b010      	add	sp, #64	; 0x40
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	20000144 	.word	0x20000144
 8000764:	40014400 	.word	0x40014400
 8000768:	0000ffff 	.word	0x0000ffff

0800076c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b090      	sub	sp, #64	; 0x40
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000772:	2324      	movs	r3, #36	; 0x24
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	0018      	movs	r0, r3
 8000778:	231c      	movs	r3, #28
 800077a:	001a      	movs	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	f002 fbb9 	bl	8002ef4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	0018      	movs	r0, r3
 8000786:	2320      	movs	r3, #32
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f002 fbb2 	bl	8002ef4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000790:	4b36      	ldr	r3, [pc, #216]	; (800086c <MX_TIM17_Init+0x100>)
 8000792:	4a37      	ldr	r2, [pc, #220]	; (8000870 <MX_TIM17_Init+0x104>)
 8000794:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <MX_TIM17_Init+0x100>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079c:	4b33      	ldr	r3, [pc, #204]	; (800086c <MX_TIM17_Init+0x100>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80007a2:	4b32      	ldr	r3, [pc, #200]	; (800086c <MX_TIM17_Init+0x100>)
 80007a4:	4a33      	ldr	r2, [pc, #204]	; (8000874 <MX_TIM17_Init+0x108>)
 80007a6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	4b30      	ldr	r3, [pc, #192]	; (800086c <MX_TIM17_Init+0x100>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80007ae:	4b2f      	ldr	r3, [pc, #188]	; (800086c <MX_TIM17_Init+0x100>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_TIM17_Init+0x100>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80007ba:	4b2c      	ldr	r3, [pc, #176]	; (800086c <MX_TIM17_Init+0x100>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fe6b 	bl	8002498 <HAL_TIM_Base_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80007c6:	f000 f8d5 	bl	8000974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80007ca:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_TIM17_Init+0x100>)
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 feb3 	bl	8002538 <HAL_TIM_PWM_Init>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f8cd 	bl	8000974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007da:	2124      	movs	r1, #36	; 0x24
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2260      	movs	r2, #96	; 0x60
 80007e0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000806:	1879      	adds	r1, r7, r1
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_TIM17_Init+0x100>)
 800080a:	2200      	movs	r2, #0
 800080c:	0018      	movs	r0, r3
 800080e:	f001 ff8b 	bl	8002728 <HAL_TIM_PWM_ConfigChannel>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000816:	f000 f8ad 	bl	8000974 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	0192      	lsls	r2, r2, #6
 800083e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000846:	1d3a      	adds	r2, r7, #4
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_TIM17_Init+0x100>)
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f002 facf 	bl	8002df0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 8000856:	f000 f88d 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <MX_TIM17_Init+0x100>)
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fa17 	bl	8000c90 <HAL_TIM_MspPostInit>

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b010      	add	sp, #64	; 0x40
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	2000018c 	.word	0x2000018c
 8000870:	40014800 	.word	0x40014800
 8000874:	0000ffff 	.word	0x0000ffff

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	240c      	movs	r4, #12
 8000880:	193b      	adds	r3, r7, r4
 8000882:	0018      	movs	r0, r3
 8000884:	2314      	movs	r3, #20
 8000886:	001a      	movs	r2, r3
 8000888:	2100      	movs	r1, #0
 800088a:	f002 fb33 	bl	8002ef4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088e:	4b36      	ldr	r3, [pc, #216]	; (8000968 <MX_GPIO_Init+0xf0>)
 8000890:	695a      	ldr	r2, [r3, #20]
 8000892:	4b35      	ldr	r3, [pc, #212]	; (8000968 <MX_GPIO_Init+0xf0>)
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	03c9      	lsls	r1, r1, #15
 8000898:	430a      	orrs	r2, r1
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	4b32      	ldr	r3, [pc, #200]	; (8000968 <MX_GPIO_Init+0xf0>)
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	03db      	lsls	r3, r3, #15
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b2f      	ldr	r3, [pc, #188]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008ac:	695a      	ldr	r2, [r3, #20]
 80008ae:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0289      	lsls	r1, r1, #10
 80008b4:	430a      	orrs	r2, r1
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	029b      	lsls	r3, r3, #10
 80008c0:	4013      	ands	r3, r2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b28      	ldr	r3, [pc, #160]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	02c9      	lsls	r1, r1, #11
 80008d0:	430a      	orrs	r2, r1
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <MX_GPIO_Init+0xf0>)
 80008d6:	695a      	ldr	r2, [r3, #20]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	02db      	lsls	r3, r3, #11
 80008dc:	4013      	ands	r3, r2
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_SER_Pin|O_RCK_Pin|O_CLK_Pin|O_S2_Pin
 80008e2:	4922      	ldr	r1, [pc, #136]	; (800096c <MX_GPIO_Init+0xf4>)
 80008e4:	2390      	movs	r3, #144	; 0x90
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	2200      	movs	r2, #0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 ff6e 	bl	80017cc <HAL_GPIO_WritePin>
                          |O_S1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : O_SER_Pin O_RCK_Pin O_CLK_Pin O_S2_Pin
                           O_S1_Pin */
  GPIO_InitStruct.Pin = O_SER_Pin|O_RCK_Pin|O_CLK_Pin|O_S2_Pin
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	4a1e      	ldr	r2, [pc, #120]	; (800096c <MX_GPIO_Init+0xf4>)
 80008f4:	601a      	str	r2, [r3, #0]
                          |O_S1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	2201      	movs	r2, #1
 80008fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	193a      	adds	r2, r7, r4
 800090a:	2390      	movs	r3, #144	; 0x90
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	0011      	movs	r1, r2
 8000910:	0018      	movs	r0, r3
 8000912:	f000 fdeb 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pins : EXI_OUT_Pin EXI_S1_Pin */
  GPIO_InitStruct.Pin = EXI_OUT_Pin|EXI_S1_Pin;
 8000916:	0021      	movs	r1, r4
 8000918:	187b      	adds	r3, r7, r1
 800091a:	220a      	movs	r2, #10
 800091c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2288      	movs	r2, #136	; 0x88
 8000922:	0352      	lsls	r2, r2, #13
 8000924:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	000c      	movs	r4, r1
 800092e:	187b      	adds	r3, r7, r1
 8000930:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <MX_GPIO_Init+0xf8>)
 8000932:	0019      	movs	r1, r3
 8000934:	0010      	movs	r0, r2
 8000936:	f000 fdd9 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pins : EXI_SVI_Pin EXI_S2_Pin */
  GPIO_InitStruct.Pin = EXI_SVI_Pin|EXI_S2_Pin;
 800093a:	0021      	movs	r1, r4
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2290      	movs	r2, #144	; 0x90
 8000940:	0212      	lsls	r2, r2, #8
 8000942:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2288      	movs	r2, #136	; 0x88
 8000948:	0352      	lsls	r2, r2, #13
 800094a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	187a      	adds	r2, r7, r1
 8000954:	2390      	movs	r3, #144	; 0x90
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	0011      	movs	r1, r2
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fdc6 	bl	80014ec <HAL_GPIO_Init>

}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b009      	add	sp, #36	; 0x24
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	40021000 	.word	0x40021000
 800096c:	00000c38 	.word	0x00000c38
 8000970:	48000400 	.word	0x48000400

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_MspInit+0x44>)
 8000988:	699a      	ldr	r2, [r3, #24]
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_MspInit+0x44>)
 800098c:	2101      	movs	r1, #1
 800098e:	430a      	orrs	r2, r1
 8000990:	619a      	str	r2, [r3, #24]
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_MspInit+0x44>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	2201      	movs	r2, #1
 8000998:	4013      	ands	r3, r2
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x44>)
 80009a0:	69da      	ldr	r2, [r3, #28]
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_MspInit+0x44>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0549      	lsls	r1, r1, #21
 80009a8:	430a      	orrs	r2, r1
 80009aa:	61da      	str	r2, [r3, #28]
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_MspInit+0x44>)
 80009ae:	69da      	ldr	r2, [r3, #28]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	055b      	lsls	r3, r3, #21
 80009b4:	4013      	ands	r3, r2
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b08b      	sub	sp, #44	; 0x2c
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	2414      	movs	r4, #20
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	0018      	movs	r0, r3
 80009d6:	2314      	movs	r3, #20
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f002 fa8a 	bl	8002ef4 <memset>
  if(hadc->Instance==ADC1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <HAL_ADC_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12b      	bne.n	8000a42 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_ADC_MspInit+0x88>)
 80009ec:	699a      	ldr	r2, [r3, #24]
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_ADC_MspInit+0x88>)
 80009f0:	2180      	movs	r1, #128	; 0x80
 80009f2:	0089      	lsls	r1, r1, #2
 80009f4:	430a      	orrs	r2, r1
 80009f6:	619a      	str	r2, [r3, #24]
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_ADC_MspInit+0x88>)
 80009fa:	699a      	ldr	r2, [r3, #24]
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_ADC_MspInit+0x88>)
 8000a08:	695a      	ldr	r2, [r3, #20]
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_ADC_MspInit+0x88>)
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	0289      	lsls	r1, r1, #10
 8000a10:	430a      	orrs	r2, r1
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_ADC_MspInit+0x88>)
 8000a16:	695a      	ldr	r2, [r3, #20]
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	029b      	lsls	r3, r3, #10
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = AI_V_Pin|AI_I_Pin|AI_IUSB_Pin;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	193a      	adds	r2, r7, r4
 8000a36:	2390      	movs	r3, #144	; 0x90
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 fd55 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b00b      	add	sp, #44	; 0x2c
 8000a48:	bd90      	pop	{r4, r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	40012400 	.word	0x40012400
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b08b      	sub	sp, #44	; 0x2c
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	2414      	movs	r4, #20
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	0018      	movs	r0, r3
 8000a62:	2314      	movs	r3, #20
 8000a64:	001a      	movs	r2, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	f002 fa44 	bl	8002ef4 <memset>
  if(hi2c->Instance==I2C1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a1c      	ldr	r2, [pc, #112]	; (8000ae4 <HAL_I2C_MspInit+0x90>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d131      	bne.n	8000ada <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_I2C_MspInit+0x94>)
 8000a78:	695a      	ldr	r2, [r3, #20]
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <HAL_I2C_MspInit+0x94>)
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	02c9      	lsls	r1, r1, #11
 8000a80:	430a      	orrs	r2, r1
 8000a82:	615a      	str	r2, [r3, #20]
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_I2C_MspInit+0x94>)
 8000a86:	695a      	ldr	r2, [r3, #20]
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	02db      	lsls	r3, r3, #11
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a92:	0021      	movs	r1, r4
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	22c0      	movs	r2, #192	; 0xc0
 8000a98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2212      	movs	r2, #18
 8000a9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2201      	movs	r2, #1
 8000ab0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <HAL_I2C_MspInit+0x98>)
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	0010      	movs	r0, r2
 8000aba:	f000 fd17 	bl	80014ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_I2C_MspInit+0x94>)
 8000ac0:	69da      	ldr	r2, [r3, #28]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_I2C_MspInit+0x94>)
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	0389      	lsls	r1, r1, #14
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	61da      	str	r2, [r3, #28]
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_I2C_MspInit+0x94>)
 8000ace:	69da      	ldr	r2, [r3, #28]
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	039b      	lsls	r3, r3, #14
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b00b      	add	sp, #44	; 0x2c
 8000ae0:	bd90      	pop	{r4, r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	48000400 	.word	0x48000400

08000af0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b08b      	sub	sp, #44	; 0x2c
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	2414      	movs	r4, #20
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	0018      	movs	r0, r3
 8000afe:	2314      	movs	r3, #20
 8000b00:	001a      	movs	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	f002 f9f6 	bl	8002ef4 <memset>
  if(htim_encoder->Instance==TIM1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <HAL_TIM_Encoder_MspInit+0x94>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d133      	bne.n	8000b7a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b14:	699a      	ldr	r2, [r3, #24]
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	0109      	lsls	r1, r1, #4
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	619a      	str	r2, [r3, #24]
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b22:	699a      	ldr	r2, [r3, #24]
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	011b      	lsls	r3, r3, #4
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b30:	695a      	ldr	r2, [r3, #20]
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0289      	lsls	r1, r1, #10
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	615a      	str	r2, [r3, #20]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b3e:	695a      	ldr	r2, [r3, #20]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	029b      	lsls	r3, r3, #10
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_IB_Pin|ENC_IA_Pin;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	22c0      	movs	r2, #192	; 0xc0
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	0021      	movs	r1, r4
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2202      	movs	r2, #2
 8000b58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2202      	movs	r2, #2
 8000b6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	187a      	adds	r2, r7, r1
 8000b6e:	2390      	movs	r3, #144	; 0x90
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 fcb9 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b00b      	add	sp, #44	; 0x2c
 8000b80:	bd90      	pop	{r4, r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	40012c00 	.word	0x40012c00
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b08b      	sub	sp, #44	; 0x2c
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	2414      	movs	r4, #20
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	0018      	movs	r0, r3
 8000b9a:	2314      	movs	r3, #20
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f002 f9a8 	bl	8002ef4 <memset>
  if(htim_pwm->Instance==TIM3)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <HAL_TIM_PWM_MspInit+0x8c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12f      	bne.n	8000c0e <HAL_TIM_PWM_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_TIM_PWM_MspInit+0x90>)
 8000bb0:	69da      	ldr	r2, [r3, #28]
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_TIM_PWM_MspInit+0x90>)
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	61da      	str	r2, [r3, #28]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_TIM_PWM_MspInit+0x90>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_TIM_PWM_MspInit+0x90>)
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_TIM_PWM_MspInit+0x90>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	02c9      	lsls	r1, r1, #11
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	615a      	str	r2, [r3, #20]
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_TIM_PWM_MspInit+0x90>)
 8000bd6:	695a      	ldr	r2, [r3, #20]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	02db      	lsls	r3, r3, #11
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_VB_Pin|ENC_VA_Pin;
 8000be2:	0021      	movs	r1, r4
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2230      	movs	r2, #48	; 0x30
 8000be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2202      	movs	r2, #2
 8000bee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_TIM_PWM_MspInit+0x94>)
 8000c06:	0019      	movs	r1, r3
 8000c08:	0010      	movs	r0, r2
 8000c0a:	f000 fc6f 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b00b      	add	sp, #44	; 0x2c
 8000c14:	bd90      	pop	{r4, r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	40000400 	.word	0x40000400
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000400 	.word	0x48000400

08000c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <HAL_TIM_Base_MspInit+0x60>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10e      	bne.n	8000c54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_TIM_Base_MspInit+0x64>)
 8000c38:	699a      	ldr	r2, [r3, #24]
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <HAL_TIM_Base_MspInit+0x64>)
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	0289      	lsls	r1, r1, #10
 8000c40:	430a      	orrs	r2, r1
 8000c42:	619a      	str	r2, [r3, #24]
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_TIM_Base_MspInit+0x64>)
 8000c46:	699a      	ldr	r2, [r3, #24]
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	029b      	lsls	r3, r3, #10
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000c52:	e012      	b.n	8000c7a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <HAL_TIM_Base_MspInit+0x68>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d10d      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_TIM_Base_MspInit+0x64>)
 8000c60:	699a      	ldr	r2, [r3, #24]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_TIM_Base_MspInit+0x64>)
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	02c9      	lsls	r1, r1, #11
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	619a      	str	r2, [r3, #24]
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_TIM_Base_MspInit+0x64>)
 8000c6e:	699a      	ldr	r2, [r3, #24]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	02db      	lsls	r3, r3, #11
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b004      	add	sp, #16
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	40014400 	.word	0x40014400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40014800 	.word	0x40014800

08000c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b08b      	sub	sp, #44	; 0x2c
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	2414      	movs	r4, #20
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	2314      	movs	r3, #20
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f002 f926 	bl	8002ef4 <memset>
  if(htim->Instance==TIM3)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a40      	ldr	r2, [pc, #256]	; (8000db0 <HAL_TIM_MspPostInit+0x120>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d124      	bne.n	8000cfc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b40      	ldr	r3, [pc, #256]	; (8000db4 <HAL_TIM_MspPostInit+0x124>)
 8000cb4:	695a      	ldr	r2, [r3, #20]
 8000cb6:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <HAL_TIM_MspPostInit+0x124>)
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	02c9      	lsls	r1, r1, #11
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	4b3c      	ldr	r3, [pc, #240]	; (8000db4 <HAL_TIM_MspPostInit+0x124>)
 8000cc2:	695a      	ldr	r2, [r3, #20]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	02db      	lsls	r3, r3, #11
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = PWM_FAN_Pin;
 8000cce:	0021      	movs	r1, r4
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2202      	movs	r2, #2
 8000cda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2201      	movs	r2, #1
 8000cec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_FAN_GPIO_Port, &GPIO_InitStruct);
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	4a31      	ldr	r2, [pc, #196]	; (8000db8 <HAL_TIM_MspPostInit+0x128>)
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	0010      	movs	r0, r2
 8000cf6:	f000 fbf9 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000cfa:	e054      	b.n	8000da6 <HAL_TIM_MspPostInit+0x116>
  else if(htim->Instance==TIM16)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <HAL_TIM_MspPostInit+0x12c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d125      	bne.n	8000d52 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <HAL_TIM_MspPostInit+0x124>)
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_TIM_MspPostInit+0x124>)
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	0289      	lsls	r1, r1, #10
 8000d10:	430a      	orrs	r2, r1
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <HAL_TIM_MspPostInit+0x124>)
 8000d16:	695a      	ldr	r2, [r3, #20]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	029b      	lsls	r3, r3, #10
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_I_Pin;
 8000d22:	2114      	movs	r1, #20
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2240      	movs	r2, #64	; 0x40
 8000d28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2205      	movs	r2, #5
 8000d40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_I_GPIO_Port, &GPIO_InitStruct);
 8000d42:	187a      	adds	r2, r7, r1
 8000d44:	2390      	movs	r3, #144	; 0x90
 8000d46:	05db      	lsls	r3, r3, #23
 8000d48:	0011      	movs	r1, r2
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fbce 	bl	80014ec <HAL_GPIO_Init>
}
 8000d50:	e029      	b.n	8000da6 <HAL_TIM_MspPostInit+0x116>
  else if(htim->Instance==TIM17)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_TIM_MspPostInit+0x130>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d124      	bne.n	8000da6 <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_TIM_MspPostInit+0x124>)
 8000d5e:	695a      	ldr	r2, [r3, #20]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_TIM_MspPostInit+0x124>)
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	0289      	lsls	r1, r1, #10
 8000d66:	430a      	orrs	r2, r1
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_TIM_MspPostInit+0x124>)
 8000d6c:	695a      	ldr	r2, [r3, #20]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	029b      	lsls	r3, r3, #10
 8000d72:	4013      	ands	r3, r2
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_V_Pin;
 8000d78:	2114      	movs	r1, #20
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2202      	movs	r2, #2
 8000d84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2205      	movs	r2, #5
 8000d96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_V_GPIO_Port, &GPIO_InitStruct);
 8000d98:	187a      	adds	r2, r7, r1
 8000d9a:	2390      	movs	r3, #144	; 0x90
 8000d9c:	05db      	lsls	r3, r3, #23
 8000d9e:	0011      	movs	r1, r2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 fba3 	bl	80014ec <HAL_GPIO_Init>
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b00b      	add	sp, #44	; 0x2c
 8000dac:	bd90      	pop	{r4, r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	40000400 	.word	0x40000400
 8000db4:	40021000 	.word	0x40021000
 8000db8:	48000400 	.word	0x48000400
 8000dbc:	40014400 	.word	0x40014400
 8000dc0:	40014800 	.word	0x40014800

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f87a 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0b      	ldr	r4, [pc, #44]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e26:	f7ff ffe4 	bl	8000df2 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e2a:	f002 f83f 	bl	8002eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2e:	f7ff f9f7 	bl	8000220 <main>

08000e32 <LoopForever>:

LoopForever:
    b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   r0, =_estack
 8000e34:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e40:	08002f54 	.word	0x08002f54
  ldr r2, =_sbss
 8000e44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e48:	200001d8 	.word	0x200001d8

08000e4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_IRQHandler>
	...

08000e50 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_Init+0x24>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_Init+0x24>)
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f809 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e66:	f7ff fd8b 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000e82:	681c      	ldr	r4, [r3, #0]
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_InitTick+0x60>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	0019      	movs	r1, r3
 8000e8a:	23fa      	movs	r3, #250	; 0xfa
 8000e8c:	0098      	lsls	r0, r3, #2
 8000e8e:	f7ff f93b 	bl	8000108 <__udivsi3>
 8000e92:	0003      	movs	r3, r0
 8000e94:	0019      	movs	r1, r3
 8000e96:	0020      	movs	r0, r4
 8000e98:	f7ff f936 	bl	8000108 <__udivsi3>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 fb17 	bl	80014d2 <HAL_SYSTICK_Config>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e00f      	b.n	8000ecc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d80b      	bhi.n	8000eca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	2200      	movs	r2, #0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 faf4 	bl	80014a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_InitTick+0x64>)
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b003      	add	sp, #12
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_IncTick+0x1c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	001a      	movs	r2, r3
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x20>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	18d2      	adds	r2, r2, r3
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_IncTick+0x20>)
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	20000008 	.word	0x20000008
 8000f00:	200001d4 	.word	0x200001d4

08000f04 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <HAL_GetTick+0x10>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	200001d4 	.word	0x200001d4

08000f18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f20:	230f      	movs	r3, #15
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e125      	b.n	8001182 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10a      	bne.n	8000f54 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2234      	movs	r2, #52	; 0x34
 8000f48:	2100      	movs	r1, #0
 8000f4a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff fd3a 	bl	80009c8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f58:	2210      	movs	r2, #16
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d000      	beq.n	8000f60 <HAL_ADC_Init+0x48>
 8000f5e:	e103      	b.n	8001168 <HAL_ADC_Init+0x250>
 8000f60:	230f      	movs	r3, #15
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d000      	beq.n	8000f6c <HAL_ADC_Init+0x54>
 8000f6a:	e0fd      	b.n	8001168 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2204      	movs	r2, #4
 8000f74:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000f76:	d000      	beq.n	8000f7a <HAL_ADC_Init+0x62>
 8000f78:	e0f6      	b.n	8001168 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7e:	4a83      	ldr	r2, [pc, #524]	; (800118c <HAL_ADC_Init+0x274>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	2202      	movs	r2, #2
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	2203      	movs	r2, #3
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d112      	bne.n	8000fbe <HAL_ADC_Init+0xa6>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d009      	beq.n	8000fba <HAL_ADC_Init+0xa2>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d101      	bne.n	8000fbe <HAL_ADC_Init+0xa6>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_ADC_Init+0xa8>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d116      	bne.n	8000ff2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2218      	movs	r2, #24
 8000fcc:	4393      	bics	r3, r2
 8000fce:	0019      	movs	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	0899      	lsrs	r1, r3, #2
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4964      	ldr	r1, [pc, #400]	; (8001190 <HAL_ADC_Init+0x278>)
 8000ffe:	400a      	ands	r2, r1
 8001000:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7e1b      	ldrb	r3, [r3, #24]
 8001006:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7e5b      	ldrb	r3, [r3, #25]
 800100c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800100e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	7e9b      	ldrb	r3, [r3, #26]
 8001014:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001016:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	2b01      	cmp	r3, #1
 800101e:	d002      	beq.n	8001026 <HAL_ADC_Init+0x10e>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	015b      	lsls	r3, r3, #5
 8001024:	e000      	b.n	8001028 <HAL_ADC_Init+0x110>
 8001026:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001028:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800102e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d101      	bne.n	800103c <HAL_ADC_Init+0x124>
 8001038:	2304      	movs	r3, #4
 800103a:	e000      	b.n	800103e <HAL_ADC_Init+0x126>
 800103c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800103e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2124      	movs	r1, #36	; 0x24
 8001044:	5c5b      	ldrb	r3, [r3, r1]
 8001046:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001048:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	4313      	orrs	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7edb      	ldrb	r3, [r3, #27]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d115      	bne.n	8001084 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7e9b      	ldrb	r3, [r3, #26]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d105      	bne.n	800106c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	0252      	lsls	r2, r2, #9
 8001066:	4313      	orrs	r3, r2
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	e00b      	b.n	8001084 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001070:	2220      	movs	r2, #32
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800107c:	2201      	movs	r2, #1
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69da      	ldr	r2, [r3, #28]
 8001088:	23c2      	movs	r3, #194	; 0xc2
 800108a:	33ff      	adds	r3, #255	; 0xff
 800108c:	429a      	cmp	r2, r3
 800108e:	d007      	beq.n	80010a0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001098:	4313      	orrs	r3, r2
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	4313      	orrs	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68d9      	ldr	r1, [r3, #12]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	055b      	lsls	r3, r3, #21
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d01b      	beq.n	80010f4 <HAL_ADC_Init+0x1dc>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d017      	beq.n	80010f4 <HAL_ADC_Init+0x1dc>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d013      	beq.n	80010f4 <HAL_ADC_Init+0x1dc>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d00f      	beq.n	80010f4 <HAL_ADC_Init+0x1dc>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d00b      	beq.n	80010f4 <HAL_ADC_Init+0x1dc>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	d007      	beq.n	80010f4 <HAL_ADC_Init+0x1dc>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e8:	2b06      	cmp	r3, #6
 80010ea:	d003      	beq.n	80010f4 <HAL_ADC_Init+0x1dc>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	2b07      	cmp	r3, #7
 80010f2:	d112      	bne.n	800111a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	695a      	ldr	r2, [r3, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2107      	movs	r1, #7
 8001100:	438a      	bics	r2, r1
 8001102:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6959      	ldr	r1, [r3, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	2207      	movs	r2, #7
 8001110:	401a      	ands	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <HAL_ADC_Init+0x27c>)
 8001122:	4013      	ands	r3, r2
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	429a      	cmp	r2, r3
 8001128:	d10b      	bne.n	8001142 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001134:	2203      	movs	r2, #3
 8001136:	4393      	bics	r3, r2
 8001138:	2201      	movs	r2, #1
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001140:	e01c      	b.n	800117c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001146:	2212      	movs	r2, #18
 8001148:	4393      	bics	r3, r2
 800114a:	2210      	movs	r2, #16
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001156:	2201      	movs	r2, #1
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800115e:	230f      	movs	r3, #15
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001166:	e009      	b.n	800117c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116c:	2210      	movs	r2, #16
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001174:	230f      	movs	r3, #15
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800117c:	230f      	movs	r3, #15
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	781b      	ldrb	r3, [r3, #0]
}
 8001182:	0018      	movs	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	b004      	add	sp, #16
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	fffffefd 	.word	0xfffffefd
 8001190:	fffe0219 	.word	0xfffe0219
 8001194:	833fffe7 	.word	0x833fffe7

08001198 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a2:	230f      	movs	r3, #15
 80011a4:	18fb      	adds	r3, r7, r3
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	055b      	lsls	r3, r3, #21
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d011      	beq.n	80011de <HAL_ADC_ConfigChannel+0x46>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d00d      	beq.n	80011de <HAL_ADC_ConfigChannel+0x46>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d009      	beq.n	80011de <HAL_ADC_ConfigChannel+0x46>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d005      	beq.n	80011de <HAL_ADC_ConfigChannel+0x46>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d001      	beq.n	80011de <HAL_ADC_ConfigChannel+0x46>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2234      	movs	r2, #52	; 0x34
 80011e2:	5c9b      	ldrb	r3, [r3, r2]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x54>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e0bb      	b.n	8001364 <HAL_ADC_ConfigChannel+0x1cc>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2234      	movs	r2, #52	; 0x34
 80011f0:	2101      	movs	r1, #1
 80011f2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2204      	movs	r2, #4
 80011fc:	4013      	ands	r3, r2
 80011fe:	d000      	beq.n	8001202 <HAL_ADC_ConfigChannel+0x6a>
 8001200:	e09f      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4a59      	ldr	r2, [pc, #356]	; (800136c <HAL_ADC_ConfigChannel+0x1d4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d100      	bne.n	800120e <HAL_ADC_ConfigChannel+0x76>
 800120c:	e077      	b.n	80012fe <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2201      	movs	r2, #1
 800121a:	409a      	lsls	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	055b      	lsls	r3, r3, #21
 800122c:	429a      	cmp	r2, r3
 800122e:	d037      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x108>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	2b01      	cmp	r3, #1
 8001236:	d033      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x108>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	2b02      	cmp	r3, #2
 800123e:	d02f      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x108>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	2b03      	cmp	r3, #3
 8001246:	d02b      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x108>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124c:	2b04      	cmp	r3, #4
 800124e:	d027      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x108>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001254:	2b05      	cmp	r3, #5
 8001256:	d023      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x108>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	2b06      	cmp	r3, #6
 800125e:	d01f      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x108>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	2b07      	cmp	r3, #7
 8001266:	d01b      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	2107      	movs	r1, #7
 8001274:	400b      	ands	r3, r1
 8001276:	429a      	cmp	r2, r3
 8001278:	d012      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2107      	movs	r1, #7
 8001286:	438a      	bics	r2, r1
 8001288:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6959      	ldr	r1, [r3, #20]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2207      	movs	r2, #7
 8001296:	401a      	ands	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b10      	cmp	r3, #16
 80012a6:	d003      	beq.n	80012b0 <HAL_ADC_ConfigChannel+0x118>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b11      	cmp	r3, #17
 80012ae:	d152      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_ADC_ConfigChannel+0x1d8>)
 80012b2:	6819      	ldr	r1, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b10      	cmp	r3, #16
 80012ba:	d102      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x12a>
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	041b      	lsls	r3, r3, #16
 80012c0:	e001      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x12e>
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	03db      	lsls	r3, r3, #15
 80012c6:	4a2a      	ldr	r2, [pc, #168]	; (8001370 <HAL_ADC_ConfigChannel+0x1d8>)
 80012c8:	430b      	orrs	r3, r1
 80012ca:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b10      	cmp	r3, #16
 80012d2:	d140      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_ADC_ConfigChannel+0x1dc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4927      	ldr	r1, [pc, #156]	; (8001378 <HAL_ADC_ConfigChannel+0x1e0>)
 80012da:	0018      	movs	r0, r3
 80012dc:	f7fe ff14 	bl	8000108 <__udivsi3>
 80012e0:	0003      	movs	r3, r0
 80012e2:	001a      	movs	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	189b      	adds	r3, r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012ee:	e002      	b.n	80012f6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f9      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x158>
 80012fc:	e02b      	b.n	8001356 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	4099      	lsls	r1, r3
 800130c:	000b      	movs	r3, r1
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	400a      	ands	r2, r1
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b10      	cmp	r3, #16
 800131e:	d003      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x190>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b11      	cmp	r3, #17
 8001326:	d116      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_ADC_ConfigChannel+0x1d8>)
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b10      	cmp	r3, #16
 8001332:	d101      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x1a0>
 8001334:	4a11      	ldr	r2, [pc, #68]	; (800137c <HAL_ADC_ConfigChannel+0x1e4>)
 8001336:	e000      	b.n	800133a <HAL_ADC_ConfigChannel+0x1a2>
 8001338:	4a11      	ldr	r2, [pc, #68]	; (8001380 <HAL_ADC_ConfigChannel+0x1e8>)
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <HAL_ADC_ConfigChannel+0x1d8>)
 800133c:	400a      	ands	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e009      	b.n	8001356 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001346:	2220      	movs	r2, #32
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800134e:	230f      	movs	r3, #15
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2234      	movs	r2, #52	; 0x34
 800135a:	2100      	movs	r1, #0
 800135c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800135e:	230f      	movs	r3, #15
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	781b      	ldrb	r3, [r3, #0]
}
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b004      	add	sp, #16
 800136a:	bd80      	pop	{r7, pc}
 800136c:	00001001 	.word	0x00001001
 8001370:	40012708 	.word	0x40012708
 8001374:	20000000 	.word	0x20000000
 8001378:	000f4240 	.word	0x000f4240
 800137c:	ff7fffff 	.word	0xff7fffff
 8001380:	ffbfffff 	.word	0xffbfffff

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	0002      	movs	r2, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b7f      	cmp	r3, #127	; 0x7f
 8001398:	d828      	bhi.n	80013ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139a:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <__NVIC_SetPriority+0xd4>)
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	33c0      	adds	r3, #192	; 0xc0
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	589b      	ldr	r3, [r3, r2]
 80013aa:	1dfa      	adds	r2, r7, #7
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	0011      	movs	r1, r2
 80013b0:	2203      	movs	r2, #3
 80013b2:	400a      	ands	r2, r1
 80013b4:	00d2      	lsls	r2, r2, #3
 80013b6:	21ff      	movs	r1, #255	; 0xff
 80013b8:	4091      	lsls	r1, r2
 80013ba:	000a      	movs	r2, r1
 80013bc:	43d2      	mvns	r2, r2
 80013be:	401a      	ands	r2, r3
 80013c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	019b      	lsls	r3, r3, #6
 80013c6:	22ff      	movs	r2, #255	; 0xff
 80013c8:	401a      	ands	r2, r3
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	0018      	movs	r0, r3
 80013d0:	2303      	movs	r3, #3
 80013d2:	4003      	ands	r3, r0
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d8:	481f      	ldr	r0, [pc, #124]	; (8001458 <__NVIC_SetPriority+0xd4>)
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	430a      	orrs	r2, r1
 80013e4:	33c0      	adds	r3, #192	; 0xc0
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013ea:	e031      	b.n	8001450 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <__NVIC_SetPriority+0xd8>)
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	0019      	movs	r1, r3
 80013f4:	230f      	movs	r3, #15
 80013f6:	400b      	ands	r3, r1
 80013f8:	3b08      	subs	r3, #8
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3306      	adds	r3, #6
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	18d3      	adds	r3, r2, r3
 8001402:	3304      	adds	r3, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1dfa      	adds	r2, r7, #7
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	0011      	movs	r1, r2
 800140c:	2203      	movs	r2, #3
 800140e:	400a      	ands	r2, r1
 8001410:	00d2      	lsls	r2, r2, #3
 8001412:	21ff      	movs	r1, #255	; 0xff
 8001414:	4091      	lsls	r1, r2
 8001416:	000a      	movs	r2, r1
 8001418:	43d2      	mvns	r2, r2
 800141a:	401a      	ands	r2, r3
 800141c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	019b      	lsls	r3, r3, #6
 8001422:	22ff      	movs	r2, #255	; 0xff
 8001424:	401a      	ands	r2, r3
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	0018      	movs	r0, r3
 800142c:	2303      	movs	r3, #3
 800142e:	4003      	ands	r3, r0
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <__NVIC_SetPriority+0xd8>)
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	001c      	movs	r4, r3
 800143c:	230f      	movs	r3, #15
 800143e:	4023      	ands	r3, r4
 8001440:	3b08      	subs	r3, #8
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	430a      	orrs	r2, r1
 8001446:	3306      	adds	r3, #6
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	18c3      	adds	r3, r0, r3
 800144c:	3304      	adds	r3, #4
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b003      	add	sp, #12
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	1e5a      	subs	r2, r3, #1
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	045b      	lsls	r3, r3, #17
 8001470:	429a      	cmp	r2, r3
 8001472:	d301      	bcc.n	8001478 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001474:	2301      	movs	r3, #1
 8001476:	e010      	b.n	800149a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <SysTick_Config+0x44>)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	3a01      	subs	r2, #1
 800147e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001480:	2301      	movs	r3, #1
 8001482:	425b      	negs	r3, r3
 8001484:	2103      	movs	r1, #3
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff ff7c 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x44>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x44>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	210f      	movs	r1, #15
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	1c02      	adds	r2, r0, #0
 80014b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b004      	add	sp, #16
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff ffbf 	bl	8001460 <SysTick_Config>
 80014e2:	0003      	movs	r3, r0
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b002      	add	sp, #8
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fa:	e14f      	b.n	800179c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4091      	lsls	r1, r2
 8001506:	000a      	movs	r2, r1
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d100      	bne.n	8001514 <HAL_GPIO_Init+0x28>
 8001512:	e140      	b.n	8001796 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2203      	movs	r2, #3
 800151a:	4013      	ands	r3, r2
 800151c:	2b01      	cmp	r3, #1
 800151e:	d005      	beq.n	800152c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2203      	movs	r2, #3
 8001526:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001528:	2b02      	cmp	r3, #2
 800152a:	d130      	bne.n	800158e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	409a      	lsls	r2, r3
 800153a:	0013      	movs	r3, r2
 800153c:	43da      	mvns	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	409a      	lsls	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001562:	2201      	movs	r2, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	2201      	movs	r2, #1
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2203      	movs	r2, #3
 8001594:	4013      	ands	r3, r2
 8001596:	2b03      	cmp	r3, #3
 8001598:	d017      	beq.n	80015ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2203      	movs	r2, #3
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d123      	bne.n	800161e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3208      	adds	r2, #8
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	58d3      	ldr	r3, [r2, r3]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2207      	movs	r2, #7
 80015e8:	4013      	ands	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	409a      	lsls	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	43da      	mvns	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2107      	movs	r1, #7
 8001602:	400b      	ands	r3, r1
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	6939      	ldr	r1, [r7, #16]
 800161c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	43da      	mvns	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2203      	movs	r2, #3
 800163c:	401a      	ands	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	409a      	lsls	r2, r3
 8001644:	0013      	movs	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	23c0      	movs	r3, #192	; 0xc0
 8001658:	029b      	lsls	r3, r3, #10
 800165a:	4013      	ands	r3, r2
 800165c:	d100      	bne.n	8001660 <HAL_GPIO_Init+0x174>
 800165e:	e09a      	b.n	8001796 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001660:	4b54      	ldr	r3, [pc, #336]	; (80017b4 <HAL_GPIO_Init+0x2c8>)
 8001662:	699a      	ldr	r2, [r3, #24]
 8001664:	4b53      	ldr	r3, [pc, #332]	; (80017b4 <HAL_GPIO_Init+0x2c8>)
 8001666:	2101      	movs	r1, #1
 8001668:	430a      	orrs	r2, r1
 800166a:	619a      	str	r2, [r3, #24]
 800166c:	4b51      	ldr	r3, [pc, #324]	; (80017b4 <HAL_GPIO_Init+0x2c8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2201      	movs	r2, #1
 8001672:	4013      	ands	r3, r2
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001678:	4a4f      	ldr	r2, [pc, #316]	; (80017b8 <HAL_GPIO_Init+0x2cc>)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	589b      	ldr	r3, [r3, r2]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2203      	movs	r2, #3
 800168a:	4013      	ands	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	409a      	lsls	r2, r3
 8001692:	0013      	movs	r3, r2
 8001694:	43da      	mvns	r2, r3
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	2390      	movs	r3, #144	; 0x90
 80016a0:	05db      	lsls	r3, r3, #23
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x1e2>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a44      	ldr	r2, [pc, #272]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x1de>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a43      	ldr	r2, [pc, #268]	; (80017c0 <HAL_GPIO_Init+0x2d4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x1da>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a42      	ldr	r2, [pc, #264]	; (80017c4 <HAL_GPIO_Init+0x2d8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x1d6>
 80016be:	2303      	movs	r3, #3
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x1e4>
 80016c2:	2305      	movs	r3, #5
 80016c4:	e004      	b.n	80016d0 <HAL_GPIO_Init+0x1e4>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e002      	b.n	80016d0 <HAL_GPIO_Init+0x1e4>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_GPIO_Init+0x1e4>
 80016ce:	2300      	movs	r3, #0
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	2103      	movs	r1, #3
 80016d4:	400a      	ands	r2, r1
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	4093      	lsls	r3, r2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016e0:	4935      	ldr	r1, [pc, #212]	; (80017b8 <HAL_GPIO_Init+0x2cc>)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	3302      	adds	r3, #2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43da      	mvns	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	025b      	lsls	r3, r3, #9
 8001706:	4013      	ands	r3, r2
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001712:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43da      	mvns	r2, r3
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	029b      	lsls	r3, r3, #10
 8001730:	4013      	ands	r3, r2
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	43da      	mvns	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	035b      	lsls	r3, r3, #13
 800175a:	4013      	ands	r3, r2
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	43da      	mvns	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	039b      	lsls	r3, r3, #14
 8001784:	4013      	ands	r3, r2
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	40da      	lsrs	r2, r3
 80017a4:	1e13      	subs	r3, r2, #0
 80017a6:	d000      	beq.n	80017aa <HAL_GPIO_Init+0x2be>
 80017a8:	e6a8      	b.n	80014fc <HAL_GPIO_Init+0x10>
  } 
}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b006      	add	sp, #24
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	48000400 	.word	0x48000400
 80017c0:	48000800 	.word	0x48000800
 80017c4:	48000c00 	.word	0x48000c00
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	0008      	movs	r0, r1
 80017d6:	0011      	movs	r1, r2
 80017d8:	1cbb      	adds	r3, r7, #2
 80017da:	1c02      	adds	r2, r0, #0
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	1c7b      	adds	r3, r7, #1
 80017e0:	1c0a      	adds	r2, r1, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e4:	1c7b      	adds	r3, r7, #1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ec:	1cbb      	adds	r3, r7, #2
 80017ee:	881a      	ldrh	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017f6:	1cbb      	adds	r3, r7, #2
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e082      	b.n	8001920 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2241      	movs	r2, #65	; 0x41
 800181e:	5c9b      	ldrb	r3, [r3, r2]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d107      	bne.n	8001836 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2240      	movs	r2, #64	; 0x40
 800182a:	2100      	movs	r1, #0
 800182c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff f90f 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2241      	movs	r2, #65	; 0x41
 800183a:	2124      	movs	r1, #36	; 0x24
 800183c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2101      	movs	r1, #1
 800184a:	438a      	bics	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4934      	ldr	r1, [pc, #208]	; (8001928 <HAL_I2C_Init+0x120>)
 8001858:	400a      	ands	r2, r1
 800185a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4931      	ldr	r1, [pc, #196]	; (800192c <HAL_I2C_Init+0x124>)
 8001868:	400a      	ands	r2, r1
 800186a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d108      	bne.n	8001886 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0209      	lsls	r1, r1, #8
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	e007      	b.n	8001896 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2184      	movs	r1, #132	; 0x84
 8001890:	0209      	lsls	r1, r1, #8
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d104      	bne.n	80018a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	491f      	ldr	r1, [pc, #124]	; (8001930 <HAL_I2C_Init+0x128>)
 80018b4:	430a      	orrs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	491a      	ldr	r1, [pc, #104]	; (800192c <HAL_I2C_Init+0x124>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69d9      	ldr	r1, [r3, #28]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1a      	ldr	r2, [r3, #32]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2241      	movs	r2, #65	; 0x41
 800190c:	2120      	movs	r1, #32
 800190e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2242      	movs	r2, #66	; 0x42
 800191a:	2100      	movs	r1, #0
 800191c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	b002      	add	sp, #8
 8001926:	bd80      	pop	{r7, pc}
 8001928:	f0ffffff 	.word	0xf0ffffff
 800192c:	ffff7fff 	.word	0xffff7fff
 8001930:	02008000 	.word	0x02008000

08001934 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2241      	movs	r2, #65	; 0x41
 8001942:	5c9b      	ldrb	r3, [r3, r2]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b20      	cmp	r3, #32
 8001948:	d138      	bne.n	80019bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2240      	movs	r2, #64	; 0x40
 800194e:	5c9b      	ldrb	r3, [r3, r2]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001954:	2302      	movs	r3, #2
 8001956:	e032      	b.n	80019be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2240      	movs	r2, #64	; 0x40
 800195c:	2101      	movs	r1, #1
 800195e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2241      	movs	r2, #65	; 0x41
 8001964:	2124      	movs	r1, #36	; 0x24
 8001966:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2101      	movs	r1, #1
 8001974:	438a      	bics	r2, r1
 8001976:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4911      	ldr	r1, [pc, #68]	; (80019c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001984:	400a      	ands	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6819      	ldr	r1, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2101      	movs	r1, #1
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2241      	movs	r2, #65	; 0x41
 80019ac:	2120      	movs	r1, #32
 80019ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2240      	movs	r2, #64	; 0x40
 80019b4:	2100      	movs	r1, #0
 80019b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e000      	b.n	80019be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019bc:	2302      	movs	r3, #2
  }
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	ffffefff 	.word	0xffffefff

080019cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2241      	movs	r2, #65	; 0x41
 80019da:	5c9b      	ldrb	r3, [r3, r2]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b20      	cmp	r3, #32
 80019e0:	d139      	bne.n	8001a56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2240      	movs	r2, #64	; 0x40
 80019e6:	5c9b      	ldrb	r3, [r3, r2]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e033      	b.n	8001a58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2240      	movs	r2, #64	; 0x40
 80019f4:	2101      	movs	r1, #1
 80019f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2241      	movs	r2, #65	; 0x41
 80019fc:	2124      	movs	r1, #36	; 0x24
 80019fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	438a      	bics	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2241      	movs	r2, #65	; 0x41
 8001a46:	2120      	movs	r1, #32
 8001a48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2240      	movs	r2, #64	; 0x40
 8001a4e:	2100      	movs	r1, #0
 8001a50:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a56:	2302      	movs	r3, #2
  }
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b004      	add	sp, #16
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	fffff0ff 	.word	0xfffff0ff

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e301      	b.n	800207a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d100      	bne.n	8001a82 <HAL_RCC_OscConfig+0x1e>
 8001a80:	e08d      	b.n	8001b9e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a82:	4bc3      	ldr	r3, [pc, #780]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	220c      	movs	r2, #12
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d00e      	beq.n	8001aac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a8e:	4bc0      	ldr	r3, [pc, #768]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	220c      	movs	r2, #12
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d116      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x64>
 8001a9a:	4bbd      	ldr	r3, [pc, #756]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	025b      	lsls	r3, r3, #9
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d10d      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	4bb8      	ldr	r3, [pc, #736]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	029b      	lsls	r3, r3, #10
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d100      	bne.n	8001aba <HAL_RCC_OscConfig+0x56>
 8001ab8:	e070      	b.n	8001b9c <HAL_RCC_OscConfig+0x138>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d000      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x60>
 8001ac2:	e06b      	b.n	8001b9c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e2d8      	b.n	800207a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x7c>
 8001ad0:	4baf      	ldr	r3, [pc, #700]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4bae      	ldr	r3, [pc, #696]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	0249      	lsls	r1, r1, #9
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e02f      	b.n	8001b40 <HAL_RCC_OscConfig+0xdc>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10c      	bne.n	8001b02 <HAL_RCC_OscConfig+0x9e>
 8001ae8:	4ba9      	ldr	r3, [pc, #676]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4ba8      	ldr	r3, [pc, #672]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	49a9      	ldr	r1, [pc, #676]	; (8001d94 <HAL_RCC_OscConfig+0x330>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	4ba6      	ldr	r3, [pc, #664]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4ba5      	ldr	r3, [pc, #660]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	49a7      	ldr	r1, [pc, #668]	; (8001d98 <HAL_RCC_OscConfig+0x334>)
 8001afc:	400a      	ands	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e01e      	b.n	8001b40 <HAL_RCC_OscConfig+0xdc>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	d10e      	bne.n	8001b28 <HAL_RCC_OscConfig+0xc4>
 8001b0a:	4ba1      	ldr	r3, [pc, #644]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4ba0      	ldr	r3, [pc, #640]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	02c9      	lsls	r1, r1, #11
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	4b9d      	ldr	r3, [pc, #628]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b9c      	ldr	r3, [pc, #624]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	0249      	lsls	r1, r1, #9
 8001b22:	430a      	orrs	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0xdc>
 8001b28:	4b99      	ldr	r3, [pc, #612]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b98      	ldr	r3, [pc, #608]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b2e:	4999      	ldr	r1, [pc, #612]	; (8001d94 <HAL_RCC_OscConfig+0x330>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	4b96      	ldr	r3, [pc, #600]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b95      	ldr	r3, [pc, #596]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b3a:	4997      	ldr	r1, [pc, #604]	; (8001d98 <HAL_RCC_OscConfig+0x334>)
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d014      	beq.n	8001b72 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff f9dc 	bl	8000f04 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b52:	f7ff f9d7 	bl	8000f04 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b64      	cmp	r3, #100	; 0x64
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e28a      	b.n	800207a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b64:	4b8a      	ldr	r3, [pc, #552]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	029b      	lsls	r3, r3, #10
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0xee>
 8001b70:	e015      	b.n	8001b9e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff f9c7 	bl	8000f04 <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f9c2 	bl	8000f04 <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e275      	b.n	800207a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	4b80      	ldr	r3, [pc, #512]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	4013      	ands	r3, r2
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x118>
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d100      	bne.n	8001baa <HAL_RCC_OscConfig+0x146>
 8001ba8:	e069      	b.n	8001c7e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001baa:	4b79      	ldr	r3, [pc, #484]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	220c      	movs	r2, #12
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d00b      	beq.n	8001bcc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bb4:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	220c      	movs	r2, #12
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d11c      	bne.n	8001bfa <HAL_RCC_OscConfig+0x196>
 8001bc0:	4b73      	ldr	r3, [pc, #460]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	025b      	lsls	r3, r3, #9
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d116      	bne.n	8001bfa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bcc:	4b70      	ldr	r3, [pc, #448]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d005      	beq.n	8001be2 <HAL_RCC_OscConfig+0x17e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e24b      	b.n	800207a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	4b6b      	ldr	r3, [pc, #428]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	22f8      	movs	r2, #248	; 0xf8
 8001be8:	4393      	bics	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	00da      	lsls	r2, r3, #3
 8001bf2:	4b67      	ldr	r3, [pc, #412]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf8:	e041      	b.n	8001c7e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d024      	beq.n	8001c4c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c02:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b62      	ldr	r3, [pc, #392]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f979 	bl	8000f04 <HAL_GetTick>
 8001c12:	0003      	movs	r3, r0
 8001c14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c18:	f7ff f974 	bl	8000f04 <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e227      	b.n	800207a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2a:	4b59      	ldr	r3, [pc, #356]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	d0f1      	beq.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c34:	4b56      	ldr	r3, [pc, #344]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	22f8      	movs	r2, #248	; 0xf8
 8001c3a:	4393      	bics	r3, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00da      	lsls	r2, r3, #3
 8001c44:	4b52      	ldr	r3, [pc, #328]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	e018      	b.n	8001c7e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4c:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b4f      	ldr	r3, [pc, #316]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c52:	2101      	movs	r1, #1
 8001c54:	438a      	bics	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff f954 	bl	8000f04 <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff f94f 	bl	8000f04 <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e202      	b.n	800207a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c74:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d1f1      	bne.n	8001c62 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2208      	movs	r2, #8
 8001c84:	4013      	ands	r3, r2
 8001c86:	d036      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d019      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c90:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c94:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f932 	bl	8000f04 <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca6:	f7ff f92d 	bl	8000f04 <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e1e0      	b.n	800207a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb8:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d0f1      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x242>
 8001cc2:	e018      	b.n	8001cf6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc4:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc8:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	438a      	bics	r2, r1
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff f918 	bl	8000f04 <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cda:	f7ff f913 	bl	8000f04 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e1c6      	b.n	800207a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d1f1      	bne.n	8001cda <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d100      	bne.n	8001d02 <HAL_RCC_OscConfig+0x29e>
 8001d00:	e0b4      	b.n	8001e6c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	201f      	movs	r0, #31
 8001d04:	183b      	adds	r3, r7, r0
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	055b      	lsls	r3, r3, #21
 8001d12:	4013      	ands	r3, r2
 8001d14:	d110      	bne.n	8001d38 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	0549      	lsls	r1, r1, #21
 8001d20:	430a      	orrs	r2, r1
 8001d22:	61da      	str	r2, [r3, #28]
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001d26:	69da      	ldr	r2, [r3, #28]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	055b      	lsls	r3, r3, #21
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d32:	183b      	adds	r3, r7, r0
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_RCC_OscConfig+0x338>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d11a      	bne.n	8001d7a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_RCC_OscConfig+0x338>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_RCC_OscConfig+0x338>)
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	0049      	lsls	r1, r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d52:	f7ff f8d7 	bl	8000f04 <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5c:	f7ff f8d2 	bl	8000f04 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e185      	b.n	800207a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_OscConfig+0x338>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d10e      	bne.n	8001da0 <HAL_RCC_OscConfig+0x33c>
 8001d82:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001d84:	6a1a      	ldr	r2, [r3, #32]
 8001d86:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	621a      	str	r2, [r3, #32]
 8001d8e:	e035      	b.n	8001dfc <HAL_RCC_OscConfig+0x398>
 8001d90:	40021000 	.word	0x40021000
 8001d94:	fffeffff 	.word	0xfffeffff
 8001d98:	fffbffff 	.word	0xfffbffff
 8001d9c:	40007000 	.word	0x40007000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x35e>
 8001da8:	4bb6      	ldr	r3, [pc, #728]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001daa:	6a1a      	ldr	r2, [r3, #32]
 8001dac:	4bb5      	ldr	r3, [pc, #724]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001dae:	2101      	movs	r1, #1
 8001db0:	438a      	bics	r2, r1
 8001db2:	621a      	str	r2, [r3, #32]
 8001db4:	4bb3      	ldr	r3, [pc, #716]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	4bb2      	ldr	r3, [pc, #712]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001dba:	2104      	movs	r1, #4
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	621a      	str	r2, [r3, #32]
 8001dc0:	e01c      	b.n	8001dfc <HAL_RCC_OscConfig+0x398>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b05      	cmp	r3, #5
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x380>
 8001dca:	4bae      	ldr	r3, [pc, #696]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001dcc:	6a1a      	ldr	r2, [r3, #32]
 8001dce:	4bad      	ldr	r3, [pc, #692]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	621a      	str	r2, [r3, #32]
 8001dd6:	4bab      	ldr	r3, [pc, #684]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001dd8:	6a1a      	ldr	r2, [r3, #32]
 8001dda:	4baa      	ldr	r3, [pc, #680]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001ddc:	2101      	movs	r1, #1
 8001dde:	430a      	orrs	r2, r1
 8001de0:	621a      	str	r2, [r3, #32]
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0x398>
 8001de4:	4ba7      	ldr	r3, [pc, #668]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001de6:	6a1a      	ldr	r2, [r3, #32]
 8001de8:	4ba6      	ldr	r3, [pc, #664]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001dea:	2101      	movs	r1, #1
 8001dec:	438a      	bics	r2, r1
 8001dee:	621a      	str	r2, [r3, #32]
 8001df0:	4ba4      	ldr	r3, [pc, #656]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001df2:	6a1a      	ldr	r2, [r3, #32]
 8001df4:	4ba3      	ldr	r3, [pc, #652]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001df6:	2104      	movs	r1, #4
 8001df8:	438a      	bics	r2, r1
 8001dfa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d014      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7ff f87e 	bl	8000f04 <HAL_GetTick>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	e009      	b.n	8001e22 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff f879 	bl	8000f04 <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4a9b      	ldr	r2, [pc, #620]	; (8002088 <HAL_RCC_OscConfig+0x624>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e12b      	b.n	800207a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e22:	4b98      	ldr	r3, [pc, #608]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	2202      	movs	r2, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
 8001e2c:	e013      	b.n	8001e56 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f869 	bl	8000f04 <HAL_GetTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	e009      	b.n	8001e4c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e38:	f7ff f864 	bl	8000f04 <HAL_GetTick>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	4a91      	ldr	r2, [pc, #580]	; (8002088 <HAL_RCC_OscConfig+0x624>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e116      	b.n	800207a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4c:	4b8d      	ldr	r3, [pc, #564]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e56:	231f      	movs	r3, #31
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d105      	bne.n	8001e6c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e60:	4b88      	ldr	r3, [pc, #544]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001e62:	69da      	ldr	r2, [r3, #28]
 8001e64:	4b87      	ldr	r3, [pc, #540]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001e66:	4989      	ldr	r1, [pc, #548]	; (800208c <HAL_RCC_OscConfig+0x628>)
 8001e68:	400a      	ands	r2, r1
 8001e6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2210      	movs	r2, #16
 8001e72:	4013      	ands	r3, r2
 8001e74:	d063      	beq.n	8001f3e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d12a      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e7e:	4b81      	ldr	r3, [pc, #516]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e82:	4b80      	ldr	r3, [pc, #512]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001e84:	2104      	movs	r1, #4
 8001e86:	430a      	orrs	r2, r1
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e8a:	4b7e      	ldr	r3, [pc, #504]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8e:	4b7d      	ldr	r3, [pc, #500]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	430a      	orrs	r2, r1
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7ff f835 	bl	8000f04 <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ea0:	f7ff f830 	bl	8000f04 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0e3      	b.n	800207a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eb2:	4b74      	ldr	r3, [pc, #464]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d0f1      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ebc:	4b71      	ldr	r3, [pc, #452]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	22f8      	movs	r2, #248	; 0xf8
 8001ec2:	4393      	bics	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	00da      	lsls	r2, r3, #3
 8001ecc:	4b6d      	ldr	r3, [pc, #436]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed2:	e034      	b.n	8001f3e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	3305      	adds	r3, #5
 8001eda:	d111      	bne.n	8001f00 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001edc:	4b69      	ldr	r3, [pc, #420]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee0:	4b68      	ldr	r3, [pc, #416]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001ee2:	2104      	movs	r1, #4
 8001ee4:	438a      	bics	r2, r1
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ee8:	4b66      	ldr	r3, [pc, #408]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eec:	22f8      	movs	r2, #248	; 0xf8
 8001eee:	4393      	bics	r3, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	00da      	lsls	r2, r3, #3
 8001ef8:	4b62      	ldr	r3, [pc, #392]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001efa:	430a      	orrs	r2, r1
 8001efc:	635a      	str	r2, [r3, #52]	; 0x34
 8001efe:	e01e      	b.n	8001f3e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f00:	4b60      	ldr	r3, [pc, #384]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f04:	4b5f      	ldr	r3, [pc, #380]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001f06:	2104      	movs	r1, #4
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f0c:	4b5d      	ldr	r3, [pc, #372]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f10:	4b5c      	ldr	r3, [pc, #368]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	438a      	bics	r2, r1
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7fe fff4 	bl	8000f04 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f22:	f7fe ffef 	bl	8000f04 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0a2      	b.n	800207a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f34:	4b53      	ldr	r3, [pc, #332]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d1f1      	bne.n	8001f22 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d100      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4e4>
 8001f46:	e097      	b.n	8002078 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f48:	4b4e      	ldr	r3, [pc, #312]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	220c      	movs	r2, #12
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d100      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4f2>
 8001f54:	e06b      	b.n	800202e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d14c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5e:	4b49      	ldr	r3, [pc, #292]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4b48      	ldr	r3, [pc, #288]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001f64:	494a      	ldr	r1, [pc, #296]	; (8002090 <HAL_RCC_OscConfig+0x62c>)
 8001f66:	400a      	ands	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7fe ffcb 	bl	8000f04 <HAL_GetTick>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f74:	f7fe ffc6 	bl	8000f04 <HAL_GetTick>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e079      	b.n	800207a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	049b      	lsls	r3, r3, #18
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f92:	4b3c      	ldr	r3, [pc, #240]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	220f      	movs	r2, #15
 8001f98:	4393      	bics	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa0:	4b38      	ldr	r3, [pc, #224]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fa6:	4b37      	ldr	r3, [pc, #220]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4a3a      	ldr	r2, [pc, #232]	; (8002094 <HAL_RCC_OscConfig+0x630>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	4b32      	ldr	r3, [pc, #200]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b30      	ldr	r3, [pc, #192]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001fc6:	2180      	movs	r1, #128	; 0x80
 8001fc8:	0449      	lsls	r1, r1, #17
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7fe ff99 	bl	8000f04 <HAL_GetTick>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe ff94 	bl	8000f04 <HAL_GetTick>
 8001fdc:	0002      	movs	r2, r0
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e047      	b.n	800207a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fea:	4b26      	ldr	r3, [pc, #152]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	049b      	lsls	r3, r3, #18
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x574>
 8001ff6:	e03f      	b.n	8002078 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8001ffe:	4924      	ldr	r1, [pc, #144]	; (8002090 <HAL_RCC_OscConfig+0x62c>)
 8002000:	400a      	ands	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7fe ff7e 	bl	8000f04 <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe ff79 	bl	8000f04 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e02c      	b.n	800207a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	049b      	lsls	r3, r3, #18
 8002028:	4013      	ands	r3, r2
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x5aa>
 800202c:	e024      	b.n	8002078 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e01f      	b.n	800207a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_RCC_OscConfig+0x620>)
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	025b      	lsls	r3, r3, #9
 800204c:	401a      	ands	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	429a      	cmp	r2, r3
 8002054:	d10e      	bne.n	8002074 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	220f      	movs	r2, #15
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d107      	bne.n	8002074 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	23f0      	movs	r3, #240	; 0xf0
 8002068:	039b      	lsls	r3, r3, #14
 800206a:	401a      	ands	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b008      	add	sp, #32
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	40021000 	.word	0x40021000
 8002088:	00001388 	.word	0x00001388
 800208c:	efffffff 	.word	0xefffffff
 8002090:	feffffff 	.word	0xfeffffff
 8002094:	ffc2ffff 	.word	0xffc2ffff

08002098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0b3      	b.n	8002214 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020ac:	4b5b      	ldr	r3, [pc, #364]	; (800221c <HAL_RCC_ClockConfig+0x184>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4013      	ands	r3, r2
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d911      	bls.n	80020de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b58      	ldr	r3, [pc, #352]	; (800221c <HAL_RCC_ClockConfig+0x184>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2201      	movs	r2, #1
 80020c0:	4393      	bics	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	4b55      	ldr	r3, [pc, #340]	; (800221c <HAL_RCC_ClockConfig+0x184>)
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_ClockConfig+0x184>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2201      	movs	r2, #1
 80020d2:	4013      	ands	r3, r2
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e09a      	b.n	8002214 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2202      	movs	r2, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	d015      	beq.n	8002114 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2204      	movs	r2, #4
 80020ee:	4013      	ands	r3, r2
 80020f0:	d006      	beq.n	8002100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020f2:	4b4b      	ldr	r3, [pc, #300]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4b4a      	ldr	r3, [pc, #296]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 80020f8:	21e0      	movs	r1, #224	; 0xe0
 80020fa:	00c9      	lsls	r1, r1, #3
 80020fc:	430a      	orrs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002100:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	22f0      	movs	r2, #240	; 0xf0
 8002106:	4393      	bics	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	4b44      	ldr	r3, [pc, #272]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2201      	movs	r2, #1
 800211a:	4013      	ands	r3, r2
 800211c:	d040      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	029b      	lsls	r3, r3, #10
 800212e:	4013      	ands	r3, r2
 8002130:	d114      	bne.n	800215c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e06e      	b.n	8002214 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	4b38      	ldr	r3, [pc, #224]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	049b      	lsls	r3, r3, #18
 8002146:	4013      	ands	r3, r2
 8002148:	d108      	bne.n	800215c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e062      	b.n	8002214 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214e:	4b34      	ldr	r3, [pc, #208]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2202      	movs	r2, #2
 8002154:	4013      	ands	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e05b      	b.n	8002214 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215c:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2203      	movs	r2, #3
 8002162:	4393      	bics	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 800216c:	430a      	orrs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002170:	f7fe fec8 	bl	8000f04 <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002178:	e009      	b.n	800218e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217a:	f7fe fec3 	bl	8000f04 <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_RCC_ClockConfig+0x18c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e042      	b.n	8002214 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	220c      	movs	r2, #12
 8002194:	401a      	ands	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	429a      	cmp	r2, r3
 800219e:	d1ec      	bne.n	800217a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <HAL_RCC_ClockConfig+0x184>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2201      	movs	r2, #1
 80021a6:	4013      	ands	r3, r2
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d211      	bcs.n	80021d2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_RCC_ClockConfig+0x184>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2201      	movs	r2, #1
 80021b4:	4393      	bics	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_RCC_ClockConfig+0x184>)
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c0:	4b16      	ldr	r3, [pc, #88]	; (800221c <HAL_RCC_ClockConfig+0x184>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2201      	movs	r2, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e020      	b.n	8002214 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2204      	movs	r2, #4
 80021d8:	4013      	ands	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021dc:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_RCC_ClockConfig+0x190>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 80021ec:	430a      	orrs	r2, r1
 80021ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021f0:	f000 f820 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021f4:	0001      	movs	r1, r0
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x188>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	091b      	lsrs	r3, r3, #4
 80021fc:	220f      	movs	r2, #15
 80021fe:	4013      	ands	r3, r2
 8002200:	4a0a      	ldr	r2, [pc, #40]	; (800222c <HAL_RCC_ClockConfig+0x194>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	000a      	movs	r2, r1
 8002206:	40da      	lsrs	r2, r3
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x198>)
 800220a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800220c:	2003      	movs	r0, #3
 800220e:	f7fe fe33 	bl	8000e78 <HAL_InitTick>
  
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b004      	add	sp, #16
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40022000 	.word	0x40022000
 8002220:	40021000 	.word	0x40021000
 8002224:	00001388 	.word	0x00001388
 8002228:	fffff8ff 	.word	0xfffff8ff
 800222c:	08002f3c 	.word	0x08002f3c
 8002230:	20000000 	.word	0x20000000

08002234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b08f      	sub	sp, #60	; 0x3c
 8002238:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800223a:	2314      	movs	r3, #20
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	4a2b      	ldr	r2, [pc, #172]	; (80022ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002240:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002242:	c313      	stmia	r3!, {r0, r1, r4}
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800224c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800224e:	c313      	stmia	r3!, {r0, r1, r4}
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002258:	2300      	movs	r3, #0
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
 800225c:	2300      	movs	r3, #0
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002268:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	220c      	movs	r2, #12
 8002272:	4013      	ands	r3, r2
 8002274:	2b04      	cmp	r3, #4
 8002276:	d002      	beq.n	800227e <HAL_RCC_GetSysClockFreq+0x4a>
 8002278:	2b08      	cmp	r3, #8
 800227a:	d003      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x50>
 800227c:	e02d      	b.n	80022da <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002280:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002282:	e02d      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	0c9b      	lsrs	r3, r3, #18
 8002288:	220f      	movs	r2, #15
 800228a:	4013      	ands	r3, r2
 800228c:	2214      	movs	r2, #20
 800228e:	18ba      	adds	r2, r7, r2
 8002290:	5cd3      	ldrb	r3, [r2, r3]
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	220f      	movs	r2, #15
 800229a:	4013      	ands	r3, r2
 800229c:	1d3a      	adds	r2, r7, #4
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	025b      	lsls	r3, r3, #9
 80022a8:	4013      	ands	r3, r2
 80022aa:	d009      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ae:	4812      	ldr	r0, [pc, #72]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022b0:	f7fd ff2a 	bl	8000108 <__udivsi3>
 80022b4:	0003      	movs	r3, r0
 80022b6:	001a      	movs	r2, r3
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	4353      	muls	r3, r2
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
 80022be:	e009      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c2:	000a      	movs	r2, r1
 80022c4:	0152      	lsls	r2, r2, #5
 80022c6:	1a52      	subs	r2, r2, r1
 80022c8:	0193      	lsls	r3, r2, #6
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	185b      	adds	r3, r3, r1
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80022d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022d8:	e002      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022de:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b00f      	add	sp, #60	; 0x3c
 80022e8:	bd90      	pop	{r4, r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	08002f1c 	.word	0x08002f1c
 80022f0:	08002f2c 	.word	0x08002f2c
 80022f4:	40021000 	.word	0x40021000
 80022f8:	007a1200 	.word	0x007a1200

080022fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	025b      	lsls	r3, r3, #9
 8002314:	4013      	ands	r3, r2
 8002316:	d100      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002318:	e08e      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800231a:	2017      	movs	r0, #23
 800231c:	183b      	adds	r3, r7, r0
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b57      	ldr	r3, [pc, #348]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	055b      	lsls	r3, r3, #21
 800232a:	4013      	ands	r3, r2
 800232c:	d110      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b54      	ldr	r3, [pc, #336]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	4b53      	ldr	r3, [pc, #332]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	0549      	lsls	r1, r1, #21
 8002338:	430a      	orrs	r2, r1
 800233a:	61da      	str	r2, [r3, #28]
 800233c:	4b50      	ldr	r3, [pc, #320]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	055b      	lsls	r3, r3, #21
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	183b      	adds	r3, r7, r0
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4013      	ands	r3, r2
 800235a:	d11a      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235c:	4b49      	ldr	r3, [pc, #292]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b48      	ldr	r3, [pc, #288]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	0049      	lsls	r1, r1, #1
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7fe fdcb 	bl	8000f04 <HAL_GetTick>
 800236e:	0003      	movs	r3, r0
 8002370:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	e008      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002374:	f7fe fdc6 	bl	8000f04 <HAL_GetTick>
 8002378:	0002      	movs	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e077      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4013      	ands	r3, r2
 8002390:	d0f0      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002392:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	23c0      	movs	r3, #192	; 0xc0
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4013      	ands	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d034      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	23c0      	movs	r3, #192	; 0xc0
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4013      	ands	r3, r2
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d02c      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023b4:	4b32      	ldr	r3, [pc, #200]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a33      	ldr	r2, [pc, #204]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023be:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	4b2f      	ldr	r3, [pc, #188]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023c4:	2180      	movs	r1, #128	; 0x80
 80023c6:	0249      	lsls	r1, r1, #9
 80023c8:	430a      	orrs	r2, r1
 80023ca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023cc:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023ce:	6a1a      	ldr	r2, [r3, #32]
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023d2:	492e      	ldr	r1, [pc, #184]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80023d4:	400a      	ands	r2, r1
 80023d6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7fe fd8d 	bl	8000f04 <HAL_GetTick>
 80023ea:	0003      	movs	r3, r0
 80023ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ee:	e009      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f0:	f7fe fd88 	bl	8000f04 <HAL_GetTick>
 80023f4:	0002      	movs	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	4a25      	ldr	r2, [pc, #148]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e038      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	2202      	movs	r2, #2
 800240a:	4013      	ands	r3, r2
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800241e:	430a      	orrs	r2, r1
 8002420:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002422:	2317      	movs	r3, #23
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002432:	4918      	ldr	r1, [pc, #96]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002434:	400a      	ands	r2, r1
 8002436:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2201      	movs	r2, #1
 800243e:	4013      	ands	r3, r2
 8002440:	d009      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	2203      	movs	r2, #3
 8002448:	4393      	bics	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002452:	430a      	orrs	r2, r1
 8002454:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2220      	movs	r2, #32
 800245c:	4013      	ands	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	2210      	movs	r2, #16
 8002466:	4393      	bics	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002470:	430a      	orrs	r2, r1
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b006      	add	sp, #24
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	40021000 	.word	0x40021000
 8002484:	40007000 	.word	0x40007000
 8002488:	fffffcff 	.word	0xfffffcff
 800248c:	fffeffff 	.word	0xfffeffff
 8002490:	00001388 	.word	0x00001388
 8002494:	efffffff 	.word	0xefffffff

08002498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e042      	b.n	8002530 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	223d      	movs	r2, #61	; 0x3d
 80024ae:	5c9b      	ldrb	r3, [r3, r2]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	223c      	movs	r2, #60	; 0x3c
 80024ba:	2100      	movs	r1, #0
 80024bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7fe fbaf 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	223d      	movs	r2, #61	; 0x3d
 80024ca:	2102      	movs	r1, #2
 80024cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	0019      	movs	r1, r3
 80024d8:	0010      	movs	r0, r2
 80024da:	f000 f9eb 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2246      	movs	r2, #70	; 0x46
 80024e2:	2101      	movs	r1, #1
 80024e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	223e      	movs	r2, #62	; 0x3e
 80024ea:	2101      	movs	r1, #1
 80024ec:	5499      	strb	r1, [r3, r2]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	223f      	movs	r2, #63	; 0x3f
 80024f2:	2101      	movs	r1, #1
 80024f4:	5499      	strb	r1, [r3, r2]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2240      	movs	r2, #64	; 0x40
 80024fa:	2101      	movs	r1, #1
 80024fc:	5499      	strb	r1, [r3, r2]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2241      	movs	r2, #65	; 0x41
 8002502:	2101      	movs	r1, #1
 8002504:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2242      	movs	r2, #66	; 0x42
 800250a:	2101      	movs	r1, #1
 800250c:	5499      	strb	r1, [r3, r2]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2243      	movs	r2, #67	; 0x43
 8002512:	2101      	movs	r1, #1
 8002514:	5499      	strb	r1, [r3, r2]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2244      	movs	r2, #68	; 0x44
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2245      	movs	r2, #69	; 0x45
 8002522:	2101      	movs	r1, #1
 8002524:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	223d      	movs	r2, #61	; 0x3d
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	b002      	add	sp, #8
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e042      	b.n	80025d0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	223d      	movs	r2, #61	; 0x3d
 800254e:	5c9b      	ldrb	r3, [r3, r2]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	223c      	movs	r2, #60	; 0x3c
 800255a:	2100      	movs	r1, #0
 800255c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f7fe fb13 	bl	8000b8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	223d      	movs	r2, #61	; 0x3d
 800256a:	2102      	movs	r1, #2
 800256c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	0019      	movs	r1, r3
 8002578:	0010      	movs	r0, r2
 800257a:	f000 f99b 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2246      	movs	r2, #70	; 0x46
 8002582:	2101      	movs	r1, #1
 8002584:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	223e      	movs	r2, #62	; 0x3e
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	223f      	movs	r2, #63	; 0x3f
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2240      	movs	r2, #64	; 0x40
 800259a:	2101      	movs	r1, #1
 800259c:	5499      	strb	r1, [r3, r2]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2241      	movs	r2, #65	; 0x41
 80025a2:	2101      	movs	r1, #1
 80025a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2242      	movs	r2, #66	; 0x42
 80025aa:	2101      	movs	r1, #1
 80025ac:	5499      	strb	r1, [r3, r2]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2243      	movs	r2, #67	; 0x43
 80025b2:	2101      	movs	r1, #1
 80025b4:	5499      	strb	r1, [r3, r2]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2244      	movs	r2, #68	; 0x44
 80025ba:	2101      	movs	r1, #1
 80025bc:	5499      	strb	r1, [r3, r2]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2245      	movs	r2, #69	; 0x45
 80025c2:	2101      	movs	r1, #1
 80025c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	223d      	movs	r2, #61	; 0x3d
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b002      	add	sp, #8
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e090      	b.n	800270e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	223d      	movs	r2, #61	; 0x3d
 80025f0:	5c9b      	ldrb	r3, [r3, r2]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	223c      	movs	r2, #60	; 0x3c
 80025fc:	2100      	movs	r1, #0
 80025fe:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0018      	movs	r0, r3
 8002604:	f7fe fa74 	bl	8000af0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	223d      	movs	r2, #61	; 0x3d
 800260c:	2102      	movs	r1, #2
 800260e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	493f      	ldr	r1, [pc, #252]	; (8002718 <HAL_TIM_Encoder_Init+0x140>)
 800261c:	400a      	ands	r2, r1
 800261e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3304      	adds	r3, #4
 8002628:	0019      	movs	r1, r3
 800262a:	0010      	movs	r0, r2
 800262c:	f000 f942 	bl	80028b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4a31      	ldr	r2, [pc, #196]	; (800271c <HAL_TIM_Encoder_Init+0x144>)
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	4313      	orrs	r3, r2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4a2c      	ldr	r2, [pc, #176]	; (8002720 <HAL_TIM_Encoder_Init+0x148>)
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <HAL_TIM_Encoder_Init+0x14c>)
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	4313      	orrs	r3, r2
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	011a      	lsls	r2, r3, #4
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	031b      	lsls	r3, r3, #12
 800269a:	4313      	orrs	r3, r2
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2222      	movs	r2, #34	; 0x22
 80026a6:	4393      	bics	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2288      	movs	r2, #136	; 0x88
 80026ae:	4393      	bics	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4313      	orrs	r3, r2
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2246      	movs	r2, #70	; 0x46
 80026e0:	2101      	movs	r1, #1
 80026e2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	223e      	movs	r2, #62	; 0x3e
 80026e8:	2101      	movs	r1, #1
 80026ea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	223f      	movs	r2, #63	; 0x3f
 80026f0:	2101      	movs	r1, #1
 80026f2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2242      	movs	r2, #66	; 0x42
 80026f8:	2101      	movs	r1, #1
 80026fa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2243      	movs	r2, #67	; 0x43
 8002700:	2101      	movs	r1, #1
 8002702:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	223d      	movs	r2, #61	; 0x3d
 8002708:	2101      	movs	r1, #1
 800270a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	0018      	movs	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	b006      	add	sp, #24
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	ffffbff8 	.word	0xffffbff8
 800271c:	fffffcfc 	.word	0xfffffcfc
 8002720:	fffff3f3 	.word	0xfffff3f3
 8002724:	ffff0f0f 	.word	0xffff0f0f

08002728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002734:	2317      	movs	r3, #23
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	223c      	movs	r2, #60	; 0x3c
 8002740:	5c9b      	ldrb	r3, [r3, r2]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002746:	2302      	movs	r3, #2
 8002748:	e0ad      	b.n	80028a6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	223c      	movs	r2, #60	; 0x3c
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d100      	bne.n	800275a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002758:	e076      	b.n	8002848 <HAL_TIM_PWM_ConfigChannel+0x120>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b0c      	cmp	r3, #12
 800275e:	d900      	bls.n	8002762 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002760:	e095      	b.n	800288e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b08      	cmp	r3, #8
 8002766:	d04e      	beq.n	8002806 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b08      	cmp	r3, #8
 800276c:	d900      	bls.n	8002770 <HAL_TIM_PWM_ConfigChannel+0x48>
 800276e:	e08e      	b.n	800288e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d021      	beq.n	80027c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800277c:	e087      	b.n	800288e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f000 f900 	bl	800298c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2108      	movs	r1, #8
 8002798:	430a      	orrs	r2, r1
 800279a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2104      	movs	r1, #4
 80027a8:	438a      	bics	r2, r1
 80027aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6999      	ldr	r1, [r3, #24]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	619a      	str	r2, [r3, #24]
      break;
 80027be:	e06b      	b.n	8002898 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	0011      	movs	r1, r2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 f95d 	bl	8002a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699a      	ldr	r2, [r3, #24]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	0109      	lsls	r1, r1, #4
 80027dc:	430a      	orrs	r2, r1
 80027de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4931      	ldr	r1, [pc, #196]	; (80028b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80027ec:	400a      	ands	r2, r1
 80027ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6999      	ldr	r1, [r3, #24]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	021a      	lsls	r2, r3, #8
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	619a      	str	r2, [r3, #24]
      break;
 8002804:	e048      	b.n	8002898 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	0011      	movs	r1, r2
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f9b8 	bl	8002b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2108      	movs	r1, #8
 8002820:	430a      	orrs	r2, r1
 8002822:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2104      	movs	r1, #4
 8002830:	438a      	bics	r2, r1
 8002832:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69d9      	ldr	r1, [r3, #28]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	61da      	str	r2, [r3, #28]
      break;
 8002846:	e027      	b.n	8002898 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	0011      	movs	r1, r2
 8002850:	0018      	movs	r0, r3
 8002852:	f000 fa17 	bl	8002c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	0109      	lsls	r1, r1, #4
 8002864:	430a      	orrs	r2, r1
 8002866:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69da      	ldr	r2, [r3, #28]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	490f      	ldr	r1, [pc, #60]	; (80028b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002874:	400a      	ands	r2, r1
 8002876:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69d9      	ldr	r1, [r3, #28]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	021a      	lsls	r2, r3, #8
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	61da      	str	r2, [r3, #28]
      break;
 800288c:	e004      	b.n	8002898 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800288e:	2317      	movs	r3, #23
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
      break;
 8002896:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	223c      	movs	r2, #60	; 0x3c
 800289c:	2100      	movs	r1, #0
 800289e:	5499      	strb	r1, [r3, r2]

  return status;
 80028a0:	2317      	movs	r3, #23
 80028a2:	18fb      	adds	r3, r7, r3
 80028a4:	781b      	ldrb	r3, [r3, #0]
}
 80028a6:	0018      	movs	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b006      	add	sp, #24
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	fffffbff 	.word	0xfffffbff

080028b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a2b      	ldr	r2, [pc, #172]	; (8002974 <TIM_Base_SetConfig+0xc0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x20>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <TIM_Base_SetConfig+0xc4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2270      	movs	r2, #112	; 0x70
 80028d8:	4393      	bics	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a22      	ldr	r2, [pc, #136]	; (8002974 <TIM_Base_SetConfig+0xc0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00f      	beq.n	800290e <TIM_Base_SetConfig+0x5a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a21      	ldr	r2, [pc, #132]	; (8002978 <TIM_Base_SetConfig+0xc4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00b      	beq.n	800290e <TIM_Base_SetConfig+0x5a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a20      	ldr	r2, [pc, #128]	; (800297c <TIM_Base_SetConfig+0xc8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <TIM_Base_SetConfig+0x5a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <TIM_Base_SetConfig+0xcc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <TIM_Base_SetConfig+0x5a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <TIM_Base_SetConfig+0xd0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d108      	bne.n	8002920 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <TIM_Base_SetConfig+0xd4>)
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	4393      	bics	r3, r2
 8002926:	001a      	movs	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <TIM_Base_SetConfig+0xc0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <TIM_Base_SetConfig+0xaa>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <TIM_Base_SetConfig+0xcc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0xaa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <TIM_Base_SetConfig+0xd0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d103      	bne.n	8002966 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	615a      	str	r2, [r3, #20]
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b004      	add	sp, #16
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40000400 	.word	0x40000400
 800297c:	40002000 	.word	0x40002000
 8002980:	40014400 	.word	0x40014400
 8002984:	40014800 	.word	0x40014800
 8002988:	fffffcff 	.word	0xfffffcff

0800298c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	2201      	movs	r2, #1
 800299c:	4393      	bics	r3, r2
 800299e:	001a      	movs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2270      	movs	r2, #112	; 0x70
 80029ba:	4393      	bics	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2203      	movs	r2, #3
 80029c2:	4393      	bics	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2202      	movs	r2, #2
 80029d4:	4393      	bics	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a23      	ldr	r2, [pc, #140]	; (8002a74 <TIM_OC1_SetConfig+0xe8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d007      	beq.n	80029fa <TIM_OC1_SetConfig+0x6e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a22      	ldr	r2, [pc, #136]	; (8002a78 <TIM_OC1_SetConfig+0xec>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d003      	beq.n	80029fa <TIM_OC1_SetConfig+0x6e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <TIM_OC1_SetConfig+0xf0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d10c      	bne.n	8002a14 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2208      	movs	r2, #8
 80029fe:	4393      	bics	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	4393      	bics	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <TIM_OC1_SetConfig+0xe8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <TIM_OC1_SetConfig+0xa0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a16      	ldr	r2, [pc, #88]	; (8002a78 <TIM_OC1_SetConfig+0xec>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d003      	beq.n	8002a2c <TIM_OC1_SetConfig+0xa0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <TIM_OC1_SetConfig+0xf0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d111      	bne.n	8002a50 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <TIM_OC1_SetConfig+0xf4>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <TIM_OC1_SetConfig+0xf8>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	621a      	str	r2, [r3, #32]
}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b006      	add	sp, #24
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40014400 	.word	0x40014400
 8002a7c:	40014800 	.word	0x40014800
 8002a80:	fffffeff 	.word	0xfffffeff
 8002a84:	fffffdff 	.word	0xfffffdff

08002a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2210      	movs	r2, #16
 8002a98:	4393      	bics	r3, r2
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a2c      	ldr	r2, [pc, #176]	; (8002b68 <TIM_OC2_SetConfig+0xe0>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a2b      	ldr	r2, [pc, #172]	; (8002b6c <TIM_OC2_SetConfig+0xe4>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	4393      	bics	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a22      	ldr	r2, [pc, #136]	; (8002b70 <TIM_OC2_SetConfig+0xe8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10d      	bne.n	8002b06 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	4393      	bics	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2240      	movs	r2, #64	; 0x40
 8002b02:	4393      	bics	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <TIM_OC2_SetConfig+0xe8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d007      	beq.n	8002b1e <TIM_OC2_SetConfig+0x96>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <TIM_OC2_SetConfig+0xec>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d003      	beq.n	8002b1e <TIM_OC2_SetConfig+0x96>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a17      	ldr	r2, [pc, #92]	; (8002b78 <TIM_OC2_SetConfig+0xf0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d113      	bne.n	8002b46 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4a16      	ldr	r2, [pc, #88]	; (8002b7c <TIM_OC2_SetConfig+0xf4>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <TIM_OC2_SetConfig+0xf8>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	621a      	str	r2, [r3, #32]
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b006      	add	sp, #24
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	ffff8fff 	.word	0xffff8fff
 8002b6c:	fffffcff 	.word	0xfffffcff
 8002b70:	40012c00 	.word	0x40012c00
 8002b74:	40014400 	.word	0x40014400
 8002b78:	40014800 	.word	0x40014800
 8002b7c:	fffffbff 	.word	0xfffffbff
 8002b80:	fffff7ff 	.word	0xfffff7ff

08002b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4a33      	ldr	r2, [pc, #204]	; (8002c60 <TIM_OC3_SetConfig+0xdc>)
 8002b94:	401a      	ands	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2270      	movs	r2, #112	; 0x70
 8002bb0:	4393      	bics	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	4393      	bics	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	4a26      	ldr	r2, [pc, #152]	; (8002c64 <TIM_OC3_SetConfig+0xe0>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a22      	ldr	r2, [pc, #136]	; (8002c68 <TIM_OC3_SetConfig+0xe4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d10d      	bne.n	8002bfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	4a21      	ldr	r2, [pc, #132]	; (8002c6c <TIM_OC3_SetConfig+0xe8>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <TIM_OC3_SetConfig+0xec>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <TIM_OC3_SetConfig+0xe4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <TIM_OC3_SetConfig+0x92>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a1a      	ldr	r2, [pc, #104]	; (8002c74 <TIM_OC3_SetConfig+0xf0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d003      	beq.n	8002c16 <TIM_OC3_SetConfig+0x92>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a19      	ldr	r2, [pc, #100]	; (8002c78 <TIM_OC3_SetConfig+0xf4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d113      	bne.n	8002c3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4a18      	ldr	r2, [pc, #96]	; (8002c7c <TIM_OC3_SetConfig+0xf8>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <TIM_OC3_SetConfig+0xfc>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	621a      	str	r2, [r3, #32]
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b006      	add	sp, #24
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	fffffeff 	.word	0xfffffeff
 8002c64:	fffffdff 	.word	0xfffffdff
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	fffff7ff 	.word	0xfffff7ff
 8002c70:	fffffbff 	.word	0xfffffbff
 8002c74:	40014400 	.word	0x40014400
 8002c78:	40014800 	.word	0x40014800
 8002c7c:	ffffefff 	.word	0xffffefff
 8002c80:	ffffdfff 	.word	0xffffdfff

08002c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <TIM_OC4_SetConfig+0xa8>)
 8002c94:	401a      	ands	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a20      	ldr	r2, [pc, #128]	; (8002d30 <TIM_OC4_SetConfig+0xac>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <TIM_OC4_SetConfig+0xb0>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <TIM_OC4_SetConfig+0xb4>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	031b      	lsls	r3, r3, #12
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <TIM_OC4_SetConfig+0xb8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d007      	beq.n	8002cf4 <TIM_OC4_SetConfig+0x70>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <TIM_OC4_SetConfig+0xbc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <TIM_OC4_SetConfig+0x70>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <TIM_OC4_SetConfig+0xc0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d109      	bne.n	8002d08 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <TIM_OC4_SetConfig+0xc4>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b006      	add	sp, #24
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	ffffefff 	.word	0xffffefff
 8002d30:	ffff8fff 	.word	0xffff8fff
 8002d34:	fffffcff 	.word	0xfffffcff
 8002d38:	ffffdfff 	.word	0xffffdfff
 8002d3c:	40012c00 	.word	0x40012c00
 8002d40:	40014400 	.word	0x40014400
 8002d44:	40014800 	.word	0x40014800
 8002d48:	ffffbfff 	.word	0xffffbfff

08002d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	223c      	movs	r2, #60	; 0x3c
 8002d5a:	5c9b      	ldrb	r3, [r3, r2]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e03c      	b.n	8002dde <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	223c      	movs	r2, #60	; 0x3c
 8002d68:	2101      	movs	r1, #1
 8002d6a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	223d      	movs	r2, #61	; 0x3d
 8002d70:	2102      	movs	r1, #2
 8002d72:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2270      	movs	r2, #112	; 0x70
 8002d88:	4393      	bics	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a11      	ldr	r2, [pc, #68]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d004      	beq.n	8002db2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d10c      	bne.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	4393      	bics	r3, r2
 8002db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	223d      	movs	r2, #61	; 0x3d
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	223c      	movs	r2, #60	; 0x3c
 8002dd8:	2100      	movs	r1, #0
 8002dda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b004      	add	sp, #16
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40000400 	.word	0x40000400

08002df0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	223c      	movs	r2, #60	; 0x3c
 8002e02:	5c9b      	ldrb	r3, [r3, r2]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e03e      	b.n	8002e8a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	223c      	movs	r2, #60	; 0x3c
 8002e10:	2101      	movs	r1, #1
 8002e12:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	22ff      	movs	r2, #255	; 0xff
 8002e18:	4393      	bics	r3, r2
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002e28:	401a      	ands	r2, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002e36:	401a      	ands	r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a16      	ldr	r2, [pc, #88]	; (8002e9c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002e44:	401a      	ands	r2, r3
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a13      	ldr	r2, [pc, #76]	; (8002ea0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002e52:	401a      	ands	r2, r3
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002e60:	401a      	ands	r2, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002e6e:	401a      	ands	r2, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	223c      	movs	r2, #60	; 0x3c
 8002e84:	2100      	movs	r1, #0
 8002e86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b004      	add	sp, #16
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	fffffcff 	.word	0xfffffcff
 8002e98:	fffffbff 	.word	0xfffffbff
 8002e9c:	fffff7ff 	.word	0xfffff7ff
 8002ea0:	ffffefff 	.word	0xffffefff
 8002ea4:	ffffdfff 	.word	0xffffdfff
 8002ea8:	ffffbfff 	.word	0xffffbfff

08002eac <__libc_init_array>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	2600      	movs	r6, #0
 8002eb0:	4d0c      	ldr	r5, [pc, #48]	; (8002ee4 <__libc_init_array+0x38>)
 8002eb2:	4c0d      	ldr	r4, [pc, #52]	; (8002ee8 <__libc_init_array+0x3c>)
 8002eb4:	1b64      	subs	r4, r4, r5
 8002eb6:	10a4      	asrs	r4, r4, #2
 8002eb8:	42a6      	cmp	r6, r4
 8002eba:	d109      	bne.n	8002ed0 <__libc_init_array+0x24>
 8002ebc:	2600      	movs	r6, #0
 8002ebe:	f000 f821 	bl	8002f04 <_init>
 8002ec2:	4d0a      	ldr	r5, [pc, #40]	; (8002eec <__libc_init_array+0x40>)
 8002ec4:	4c0a      	ldr	r4, [pc, #40]	; (8002ef0 <__libc_init_array+0x44>)
 8002ec6:	1b64      	subs	r4, r4, r5
 8002ec8:	10a4      	asrs	r4, r4, #2
 8002eca:	42a6      	cmp	r6, r4
 8002ecc:	d105      	bne.n	8002eda <__libc_init_array+0x2e>
 8002ece:	bd70      	pop	{r4, r5, r6, pc}
 8002ed0:	00b3      	lsls	r3, r6, #2
 8002ed2:	58eb      	ldr	r3, [r5, r3]
 8002ed4:	4798      	blx	r3
 8002ed6:	3601      	adds	r6, #1
 8002ed8:	e7ee      	b.n	8002eb8 <__libc_init_array+0xc>
 8002eda:	00b3      	lsls	r3, r6, #2
 8002edc:	58eb      	ldr	r3, [r5, r3]
 8002ede:	4798      	blx	r3
 8002ee0:	3601      	adds	r6, #1
 8002ee2:	e7f2      	b.n	8002eca <__libc_init_array+0x1e>
 8002ee4:	08002f4c 	.word	0x08002f4c
 8002ee8:	08002f4c 	.word	0x08002f4c
 8002eec:	08002f4c 	.word	0x08002f4c
 8002ef0:	08002f50 	.word	0x08002f50

08002ef4 <memset>:
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	1882      	adds	r2, r0, r2
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d100      	bne.n	8002efe <memset+0xa>
 8002efc:	4770      	bx	lr
 8002efe:	7019      	strb	r1, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	e7f9      	b.n	8002ef8 <memset+0x4>

08002f04 <_init>:
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0a:	bc08      	pop	{r3}
 8002f0c:	469e      	mov	lr, r3
 8002f0e:	4770      	bx	lr

08002f10 <_fini>:
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f16:	bc08      	pop	{r3}
 8002f18:	469e      	mov	lr, r3
 8002f1a:	4770      	bx	lr
